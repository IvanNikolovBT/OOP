#include <iostream>
#include <cmath>

using namespace std;


class ComplexNumber
{
private:
	double real;
	double imaginary;

public:
	ComplexNumber(double r = 0, double i = 0)
	{
		real = r;
		imaginary = i;
	}

	ComplexNumber(const ComplexNumber& other)
	{
		real = other.real;
		imaginary = other.imaginary;
	}

	~ComplexNumber(){}

	double module()
	{
		return sqrt(pow(real, 2) + pow(imaginary, 2));
	}

	friend ostream& operator<<(ostream &os, const ComplexNumber &cn)
	{
		if(cn.real != 0 && cn.imaginary != 0)
			os << cn.real << "+" << cn.imaginary << "i" << endl;
		else if(cn.imaginary != 0 && cn.real == 0)
			os << cn.imaginary << "i" << endl;
		else if(cn.imaginary == 0 && cn.real != 0)
			os << cn.real << endl;
		return os;
	}

	ComplexNumber operator+(const ComplexNumber& cn)
	{
		return ComplexNumber(real + cn.real, imaginary + cn.imaginary);
	}

	ComplexNumber operator-(const ComplexNumber& cn)
	{
		return ComplexNumber(real - cn.real, imaginary - cn.imaginary);
	}

	ComplexNumber operator*(const ComplexNumber& cn)
	{
		return ComplexNumber(real * cn.real, imaginary * cn.imaginary);
	}

	ComplexNumber operator/(const ComplexNumber& cn)
	{
		return ComplexNumber(real / cn.real, imaginary / cn.imaginary);
	}

	friend bool operator==(const ComplexNumber& cn1, const ComplexNumber& cn2)
	{
		if(cn1.real == cn2.real && cn1.imaginary == cn2.imaginary)
			return true;

		return false;
	}

	friend bool operator<(const ComplexNumber& cn1, const ComplexNumber& cn2)
	{
		if(cn1.real < cn2.real)
			return true;

		else if(cn1.real > cn2.real)
			return false;

		else
		{
			if(cn1.imaginary < cn2.imaginary)
				return true;

			return false;
		}

	}

	friend bool operator>(const ComplexNumber& cn1, const ComplexNumber& cn2)
	{
		if(cn1.real > cn2.real)
			return true;

		else if(cn1.real < cn2.real)
			return false;

		else
		{
			if(cn1.imaginary > cn2.imaginary)
				return true;

			return false;
		}
	}
};

class Equation
{
private:
	unsigned int count;
	ComplexNumber* complex_numbers;
	char* operations;

public:
	Equation()
	: count(0)
	, complex_numbers(nullptr)
	, operations(nullptr)
	{}

	~Equation()
	{
		if(count)
		{
			delete[] complex_numbers;
			delete[] operations;
		}
	}

	void expand_arrays()
	{
		ComplexNumber* new_complex_numbers = new ComplexNumber[count + 1];
		char* new_operations = new char[count + 1];

		if(count)
		{
			for(int i = 0; i < count; ++i)
			{
				new_complex_numbers[i] = complex_numbers[i];
				new_operations[i] = operations[i];
			}

			delete[] complex_numbers;
			delete[] operations;
		}

		complex_numbers = new_complex_numbers;
		operations = new_operations;
		++count;
	}

	friend istream& operator>>(istream& input, Equation& eq)
	{
		while(true)
		{
			eq.expand_arrays();

			double real, imaginary;
			input >> real >> imaginary;
			eq.complex_numbers[eq.count - 1] = ComplexNumber(real, imaginary);

			char operation;
			input >> operation;

			eq.operations[eq.count - 1] = operation;

			if(operation == '=')
				break;
		}
		return input;
	}

	double sumModules()
	{
		double ret = 0;

		for(int i = 0; i < count; ++i)
			ret += complex_numbers[i].module();

		return ret;
	}

	ComplexNumber result()
	{
	    ComplexNumber temp = complex_numbers[0];
		for(int i = 0; i < count; ++i)
        {
            if(operations[i] == '+')
                temp = temp + complex_numbers[i+1];
            else if(operations[i] == '-')
                temp = temp - complex_numbers[i+1];
            else if(operations[i] == '*')
                temp = temp * complex_numbers[i+1];
            else if(operations[i] == '/')
                temp = temp / complex_numbers[i+1];
        }
        return temp;
	}
};

int main() {
	int testCase;
	double real, imaginary;
	ComplexNumber first, second, result;

	cin >> testCase;

	if (testCase <= 8) {
		cin >> real;
		cin >> imaginary;
		first = ComplexNumber(real, imaginary);
		cin >> real;
		cin >> imaginary;
		second = ComplexNumber(real, imaginary);
	}

	if (testCase == 1) {
		cout << "===== OPERATOR + =====" << endl;
		result = first + second;
		cout << result;
	}
	else if (testCase == 2) {
		cout << "===== OPERATOR - =====" << endl;
		result = first - second;
		cout << result;
	}
	else if (testCase == 3) {
		cout << "===== OPERATOR * =====" << endl;
		result = first * second;
		cout << result;
	}
	else if (testCase == 4) {
		cout << "===== OPERATOR / =====" << endl;
		result = first / second;
		cout << result;
	}
	else if (testCase == 5) {
		cout << "===== OPERATOR == =====" << endl;
		cout << first;
		cout << second;
		if (first == second)
			cout << "EQUAL" << endl;
		else
			cout << "NOT EQUAL" << endl;
	}
	else if (testCase == 6) {
		cout << "===== OPERATOR > =====" << endl;
		cout << first;
		cout << second;
		if (first > second)
			cout << "FIRST GREATER THAN SECOND" << endl;
		else
			cout << "FIRST LESSER THAN SECOND" << endl;
	}
	else if (testCase == 7) {
		cout << "===== OPERATOR < =====" << endl;
		cout << first;
		cout << second;
		if (first < second)
			cout << "FIRST LESSER THAN SECOND" << endl;
		else
			cout << "FIRST GREATER THAN SECOND" << endl;
	}
	else if (testCase == 8) {
		cout << "===== MODULE =====" << endl;
		double module = first.module();
		cout << first;
		cout << "Module: " << module << endl;
		cout << second;
		module = second.module();
		cout << "Module: " << module << endl;
	}
	else if (testCase == 9) {
		cout << "===== OPERATOR >> & SUM OF MODULES =====" << endl;
		Equation equation;
		cin >> equation;
		cout << equation.sumModules();
	}
	else if (testCase == 10) {
		cout << "===== EQUATION RESULT =====" << endl;
		Equation equation;
		cin >> equation;
		result = equation.result();
		cout << result;
	}
	return 0;

}
