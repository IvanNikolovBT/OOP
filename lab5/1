#include <iostream>
#include <cstring>
using namespace std;

class Automobile {
private:
    char * marka;
    int * registracija;
    int maxBrzina;
public:
    Automobile() {
        marka = new char[0];
        registracija = new int[0];
        maxBrzina = 0;
    }
    Automobile(char * m, int * r, int mspeed) {
        maxBrzina = mspeed;
        registracija = new int[5];
        for(int i=0; i<5; i++) {
            registracija[i] = r[i];
        }
        marka = new char[strlen(m)+1];
        strcpy(marka, m);
    }
    Automobile(const Automobile &a) {
        this->maxBrzina = a.maxBrzina;
        this->registracija = new int[5];
        for(int i=0; i<5; i++) {
            this->registracija[i] = a.registracija[i];
        }
        this->marka = new char[strlen(a.marka)+1];
        strcpy(this->marka, a.marka);
    }
    bool operator==(const Automobile &a) {
        for(int i=0; i<5; i++) {
            if(registracija[i] != a.registracija[i]) return false;
        }
        return true;
    }
    friend ostream &operator<<(ostream &out, const Automobile &a) {
        out<<"Marka\t"<<a.marka<<"\tRegistracija[ ";
        for(int i=0; i<5; i++) {
            out<<a.registracija[i]<<" ";
        }
        out<<"]"<<endl;
        return out;
    }
    int getBrzina() {
        return maxBrzina;
    }
};

class RentACar {
private:
    char ime[100];
    Automobile * cars;
    int n;
public:
    RentACar() {
        cars = new Automobile[0];
        strcpy(ime,"");
        n = 0;
    }
    RentACar(char * i) {
        strcpy(ime, i);
        cars = new Automobile[0];
        n = 0;
    }
    RentACar& operator+=(Automobile &a) {
        Automobile * tmp = new Automobile[n+1];
        for(int i=0; i<n; i++) {
            tmp[i] = cars[i];
        }
        delete [] cars;
        tmp[n++] = a;
        cars = tmp;
        return * this;
    }
    RentACar &operator -=(Automobile a)
    {
        int zapi;
        for(int i=0; i<n; i++)
            if(cars[i]==a)
            {
                zapi=i;
                break;
            }
        Automobile *zap = new Automobile[n-1];
        for(int i=0; i<n; i++)
        {
            if(i==zapi)
                continue;
            zap[i] = cars[i];
        }
        delete[] cars;
        cars = zap;
        return *this;
    }
    void pecatiNadBrzina(int max) {
        cout<<ime<<endl;
        for(int i=0;i<n;i++){
            if(cars[i].getBrzina()>max) cout<<cars[i];
        }
    }

};

int main()
{
   RentACar agencija("FINKI-Car");
   int n;
   cin>>n;
    
   for (int i=0;i<n;i++)
   {
    	char marka[100];
    	int regisracija[5];
    	int maximumBrzina;
    
       	cin>>marka;
    
       	for (int i=0;i<5;i++)
    		cin>>regisracija[i];
    
    	cin>>maximumBrzina;
    
       	Automobile nov=Automobile(marka,regisracija,maximumBrzina);
       
    	//dodavanje na avtomobil
       	agencija+=nov;   
       
   }
    //se cita grehsniot avtmobil, za koj shto avtmobilot so ista registracija treba da se izbrishe
    char marka[100];
    int regisracija[5];
    int maximumBrzina;
    cin>>marka;
    for (int i=0;i<5;i++)
    cin>>regisracija[i];
    cin>>maximumBrzina;
    
    Automobile greshka=Automobile(marka,regisracija,maximumBrzina);
    
    //brishenje na avtomobil
    agencija-=greshka;
    
    agencija.pecatiNadBrzina(150);
    
    return 0;
}
