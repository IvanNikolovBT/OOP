#include <iostream>
#include <cstring>
 
using namespace std;
 
class UserExistsException
{
public:
    void message()
    {
        cout << "The user already exists in the list!" << endl;
    }
};
 
enum typeC
{
    Standard,
    Loyal,
    VIP
};
 
class Customer
{
private:
    char name[50];
    char email[50];
    typeC type;
    int num_products;
    static int base_discount;
    static int additional_discount;
 
public:
    Customer()
    {
        strcpy(name, "");
        strcpy(email, "");
        type = Standard;
        num_products = 0;
    }
 
    Customer(char* name, char* email, typeC type, int num_products)
    {
        strcpy(this->name, name);
        strcpy(this->email, email);
        this->type = type;
        this->num_products = num_products;
    }
 
    int getNumProducts()
    {
        return num_products;
    }
 
    char* get_email()
    {
        return email;
    }
 
    typeC getType()
    {
        return type;
    }
 
    void setType(typeC newType)
    {
        type = newType;
    }
 
    void setDiscount1(int base_discount)
    {
        this->base_discount = base_discount;
    }
 
    void setDiscount2(int additional_discount)
    {
        this->additional_discount = additional_discount;
    }
 
    friend ostream& operator<<(ostream& os, Customer& c)
    {
        os << c.name << endl << c.email << endl << c.num_products << endl;
        if(c.type == Standard)
            os << "standard 0" << endl;
        else if(c.type == Loyal)
            os << "loyal " << c.base_discount << endl;
        else
            os << "vip " << c.base_discount + c.additional_discount << endl;
    }
 
};
 
int Customer::base_discount = 10;
int Customer::additional_discount = 20;
 
class FINKI_bookstore
{
private:
    Customer* customers;
    int num_customers;
 
public:
    FINKI_bookstore()
    {
        customers = nullptr;
        num_customers = 0;
    }
 
    ~FINKI_bookstore()
    {
        if(customers != nullptr)
            delete[] customers;
    }
 
    FINKI_bookstore& operator+=(Customer& add)
    {
        for(int i = 0; i < num_customers; i++)
        {
            if(strcmp(customers[i].get_email(), add.get_email()) == 0)
            {
                throw UserExistsException();
            }
        }
 
        Customer* temp = new Customer[num_customers + 1];
 
        for(int i = 0; i < num_customers; i++)
        {
            temp[i] = customers[i];
        }
 
        temp[num_customers++] = add;
 
        if(customers != nullptr)
            delete[] customers;
 
        customers = temp;
 
        return *this;
    }
 
    void update()
    {
        for(int i = 0; i < num_customers; i++)
        {
             if(customers[i].getType() == Loyal && customers[i].getNumProducts() > 10)
                customers[i].setType(VIP);
 
             if(customers[i].getType() == Standard && customers[i].getNumProducts() > 5)
                customers[i].setType(Loyal);
        }
    }
 
    friend ostream& operator<<(ostream& os, FINKI_bookstore& fb)
    {
        for(int i = 0; i < fb.num_customers; i++)
            os << fb.customers[i];
        return os;
    }
 
    void setCustomers(Customer* c, int n)
    {
        num_customers = n;
 
        if(customers != nullptr)
            delete[] customers;
 
        Customer *temp = new Customer[num_customers];
        for(int i = 0; i < num_customers; i++)
        {
            temp[i] = c[i];
        }
 
        customers = temp;
    }
};
int main(){
      int testCase;
      cin >> testCase;
 
      int MAX = 100;
      char name[MAX];
      char email[MAX];
      int tC;
      int discount;
      int numProducts;
 
 
    if(testCase == 1){
        cout << "===== Test Case - Customer Class ======" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        cout << "===== CONSTRUCTOR ======" << endl;
        Customer c(name, email, (typeC) tC, numProducts);
        cout << c;
 
      }
 
    if(testCase == 2){
        cout << "===== Test Case - Static Members ======" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        cout << "===== CONSTRUCTOR ======" << endl;
        Customer c(name, email, (typeC) tC, numProducts);
        cout << c;
 
        c.setDiscount1(5);
 
        cout << c;
      }
 
    if(testCase == 3){
        cout << "===== Test Case - FINKI-bookstore ======" << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
          cin.get();
          cin.getline(name,MAX);
          cin.getline(email,MAX);
          cin >> tC;
          cin >> numProducts;
          Customer c(name, email, (typeC) tC, numProducts);
          customers[i] = c;
        }
 
        fc.setCustomers(customers, n);
 
        cout << fc <<endl;
      }
 
    if(testCase == 4){
        cout << "===== Test Case - operator+= ======" << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
          cin.get();
          cin.getline(name,MAX);
          cin.getline(email,MAX);
          cin >> tC;
          cin >> numProducts;
          Customer c(name, email, (typeC) tC, numProducts);
          customers[i] = c;
        }
 
        fc.setCustomers(customers, n);
        cout << "OPERATOR +=" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        Customer c(name, email, (typeC) tC, numProducts);
        try
        {
            fc+=c;
        }
 
        catch(UserExistsException uee)
        {
            uee.message();
        }
 
        cout << fc;
      }
 
    if(testCase == 5){
        cout << "===== Test Case - operator+= (exception) ======" << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
          cin.get();
          cin.getline(name,MAX);
          cin.getline(email,MAX);
          cin >> tC;
          cin >> numProducts;
          Customer c(name, email, (typeC) tC, numProducts);
            try
            {
                fc+=c;
            }
 
            catch(UserExistsException uee)
            {
                uee.message();
            }
        }
 
        //fc.setCustomers(customers, n);
        cout << "OPERATOR +=" << endl;
        cin.get();
        cin.getline(name,MAX);
        cin.getline(email,MAX);
        cin >> tC;
        cin >> numProducts;
        Customer c(name, email, (typeC) tC, numProducts);
 
        try
        {
            fc+=c;
        }
 
        catch(UserExistsException uee)
        {
            uee.message();
        }
 
        cout << fc;
      }
 
    if(testCase == 6){
        cout << "===== Test Case - update method  ======" << endl << endl;
        FINKI_bookstore fc;
        int n;
        cin >> n;
        Customer customers[MAX];
        for(int i = 0; i < n; ++i) {
          cin.get();
          cin.getline(name,MAX);
          cin.getline(email,MAX);
          cin >> tC;
          cin >> numProducts;
          Customer c(name, email, (typeC) tC, numProducts);
          customers[i] = c;
        }
 
        fc.setCustomers(customers, n);
 
        cout << "Update:" << endl;
        fc.update();
        cout << fc;
      }
      return 0;
 
}
