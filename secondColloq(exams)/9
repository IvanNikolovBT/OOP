#include<iostream>
#include<cstring>
using namespace std;
 
class Exception
{
public:
    void message()
    {
        cout<<"Ne moze da se vnese dadeniot trud"<<endl;
    }
};
 
class Trud
{
    char vid;
    int godina;
public:
    Trud(){}
    Trud(char vid, int godina)
    {
        this->vid = toupper(vid);
        this->godina = godina;
    }
    char getVid()
    {
        return vid;
    }
    void setVid(char vid)
    {
        this->vid = vid;
    }
    int getGodina()
    {
        return godina;
    }
    friend istream &operator >>(istream &in, Trud &t)
    {
        in>>t.vid>>t.godina;
        return in;
    }
};
 
class Student
{
    char ime[30];
    int index;
    int upis;
    int lista[50];
    int polozeni;
public:
    Student(){}
    Student(char *ime, int index, int upis, int *lista, int polozeni)
    {
        strcpy(this->ime, ime);
        this->index=index;
        this->upis=upis;
        for(int i=0; i<polozeni; i++)
            this->lista[i] = lista[i];
        this->polozeni = polozeni;
    }
    virtual float rang()
    {
        int suma=0;
        for(int i=0; i<polozeni; i++)
            suma=suma+lista[i];
        return suma/(float)polozeni;
    }
    friend ostream &operator << (ostream &out, Student &s)
    {
        out<<s.index<<" "<<s.ime<<" "<<s.upis<<" "<<s.rang()<<endl;
        return out;
    }
    int getUpis()
    {
        return upis;
    }
    int getIndex()
    {
        return index;
    }
};
 
class PhDStudent : public Student
{
    Trud *niza;
    int count;
    static int K;
    static int J;
public:
    PhDStudent(char *ime, int index, int upis, int *lista, int polozeni, Trud *niza, int count) : Student(ime,index,upis,lista,polozeni)
    {
        int brojac=0;
        this->niza = new Trud[count];
        this->count = count;
        for(int i=0; i<count; i++)
        {
            try
            {
                if(this->getUpis()>niza[i].getGodina())
                    throw Exception();
                this->niza[brojac++] = niza[i];
            }
            catch(Exception e)
            {
                e.message();
            }
        }
        this->count=brojac;
    }
    float rang()
    {
        float sum=0;
        for(int i=0; i<count; i++)
        {
            if(niza[i].getVid()=='C')
                sum= sum+K;
            else
                sum = sum+J;
        }
        return sum + Student::rang();
    }
    PhDStudent &operator +=(Trud &t)
    {
        if(getUpis()>t.getGodina())
            throw Exception();
 
        Trud *zap = new Trud[count+1];
        for(int i=0; i<count; i++)
            zap[i] = niza[i];
        delete[]niza;
        zap[count++]=t;
        niza = zap;
        return *this;
    }
    static void setConf(int broj)
    {
        K=broj;
    }
    static void setJor(int broj)
    {
        J=broj;
    }
};
 
int PhDStudent::K=1;
int PhDStudent::J=3;
 
int main(){
	int testCase;
	cin >> testCase;
 
	int god, indeks, n, god_tr, m, n_tr;
	int izbor; //0 za Student, 1 za PhDStudent
	char ime[30];
	int oceni[50];
	char tip;
	Trud trud[50];
 
	if (testCase == 1){
		cout << "===== Testiranje na klasite ======" << endl;
		cin >> ime;
		cin >> indeks;
		cin >> god;
		cin >> n;
		for (int j = 0; j < n; j++)
			cin >> oceni[j];
		Student s(ime, indeks, god, oceni, n);
		cout << s;
 
		cin >> ime;
		cin >> indeks;
		cin >> god;
		cin >> n;
		for (int j = 0; j < n; j++)
			cin >> oceni[j];
		cin >> n_tr;
		for (int j = 0; j < n_tr; j++){
			cin >> tip;
			cin >> god_tr;
			Trud t(tip, god_tr);
			trud[j] = t;
		}
		PhDStudent phd(ime, indeks, god, oceni, n, trud, n_tr);
		cout << phd;
	}
	if (testCase == 2){
		cout << "===== Testiranje na operatorot += ======" << endl;
		Student **niza;
		cin >> m;
		niza = new Student *[m];
		for (int i = 0; i<m; i++){
			cin >> izbor;
			cin >> ime;
			cin >> indeks;
			cin >> god;
			cin >> n;
			for (int j = 0; j < n; j++)
				cin >> oceni[j];
 
			if (izbor == 0){
				niza[i] = new Student(ime, indeks, god, oceni, n);
			}
			else{
				cin >> n_tr;
				for (int j = 0; j < n_tr; j++){
					cin >> tip;
					cin >> god_tr;
					Trud t(tip, god_tr);
					trud[j] = t;
				}
				niza[i] = new PhDStudent(ime, indeks, god, oceni, n, trud, n_tr);
			}
		}
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
 
		// dodavanje nov trud za PhD student spored indeks
		Trud t;
		cin >> indeks;
		cin >> t;
 
        int zapi=-1;
        for(int i=0; i<m; i++)
        {
            if(niza[i]->getIndex()==indeks)
                zapi=i;
        }
 
        PhDStudent *p = dynamic_cast<PhDStudent*>(niza[zapi]);
        if(p!=0)
        {
            try
            {
            *p+=t;
            }
            catch(Exception e)
            {
                e.message();
            }
        }
        else
        {
            cout<<"Ne postoi PhD student so indeks "<<indeks<<endl;
        }
		// vmetnete go kodot za dodavanje nov trud so pomos na operatorot +=
 
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
	}
	if (testCase == 3){
		cout << "===== Testiranje na operatorot += ======" << endl;
		Student **niza;
		cin >> m;
		niza = new Student *[m];
		for (int i = 0; i<m; i++){
			cin >> izbor;
			cin >> ime;
			cin >> indeks;
			cin >> god;
			cin >> n;
			for (int j = 0; j < n; j++)
				cin >> oceni[j];
 
			if (izbor == 0){
				niza[i] = new Student(ime, indeks, god, oceni, n);
			}
			else{
				cin >> n_tr;
				for (int j = 0; j < n_tr; j++){
					cin >> tip;
					cin >> god_tr;
					Trud t(tip, god_tr);
					trud[j] = t;
				}
				niza[i] = new PhDStudent(ime, indeks, god, oceni, n, trud, n_tr);
			}
		}
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
 
		// dodavanje nov trud za PhD student spored indeks
		Trud t;
		cin >> indeks;
		cin >> t;
 
		// vmetnete go kodot za dodavanje nov trud so pomos na operatorot += od Testcase 2
        int zapi=-1;
        for(int i=0; i<m; i++)
        {
            if(niza[i]->getIndex()==indeks)
                zapi=i;
        }
 
        PhDStudent *p = dynamic_cast<PhDStudent*>(niza[zapi]);
        if(p!=0)
        {
            try
            {
            *p+=t;
            }
            catch(Exception e)
            {
                e.message();
            }
        }
        else
        {
            cout<<"Ne postoi PhD student so indeks "<<indeks<<endl;
        }
 
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
	}
	if (testCase == 4){
		cout << "===== Testiranje na isklucoci ======" << endl;
		cin >> ime;
		cin >> indeks;
		cin >> god;
		cin >> n;
		for (int j = 0; j < n; j++)
			cin >> oceni[j];
		cin >> n_tr;
		for (int j = 0; j < n_tr; j++){
			cin >> tip;
			cin >> god_tr;
			Trud t(tip, god_tr);
			trud[j] = t;
		}
		PhDStudent phd(ime, indeks, god, oceni, n, trud, n_tr);
		cout << phd;
	}
	if (testCase == 5){
		cout << "===== Testiranje na isklucoci ======" << endl;
		Student **niza;
		cin >> m;
		niza = new Student *[m];
		for (int i = 0; i<m; i++){
			cin >> izbor;
			cin >> ime;
			cin >> indeks;
			cin >> god;
			cin >> n;
			for (int j = 0; j < n; j++)
				cin >> oceni[j];
 
			if (izbor == 0){
				niza[i] = new Student(ime, indeks, god, oceni, n);
			}
			else{
				cin >> n_tr;
				for (int j = 0; j < n_tr; j++){
					cin >> tip;
					cin >> god_tr;
					Trud t(tip, god_tr);
					trud[j] = t;
				}
				niza[i] = new PhDStudent(ime, indeks, god, oceni, n, trud, n_tr);
			}
		}
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
 
		// dodavanje nov trud za PhD student spored indeks
		Trud t;
		cin >> indeks;
		cin >> t;
 
		// vmetnete go kodot za dodavanje nov trud so pomos na operatorot += i spravete se so isklucokot
		int zapi=-1;
        for(int i=0; i<m; i++)
        {
            if(niza[i]->getIndex()==indeks)
                zapi=i;
        }
 
        PhDStudent *p = dynamic_cast<PhDStudent*>(niza[zapi]);
        if(p!=0)
        {
            try
            {
            *p+=t;
            }
            catch(Exception e)
            {
                e.message();
            }
        }
        else
        {
            cout<<"Ne postoi PhD student so indeks "<<indeks<<endl;
        }
 
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
	}
	if (testCase == 6){
		cout << "===== Testiranje na static clenovi ======" << endl;
		Student **niza;
		cin >> m;
		niza = new Student *[m];
		for (int i = 0; i<m; i++){
			cin >> izbor;
			cin >> ime;
			cin >> indeks;
			cin >> god;
			cin >> n;
			for (int j = 0; j < n; j++)
				cin >> oceni[j];
 
			if (izbor == 0){
				niza[i] = new Student(ime, indeks, god, oceni, n);
			}
			else{
				cin >> n_tr;
				for (int j = 0; j < n_tr; j++){
					cin >> tip;
					cin >> god_tr;
					Trud t(tip, god_tr);
					trud[j] = t;
				}
				niza[i] = new PhDStudent(ime, indeks, god, oceni, n, trud, n_tr);
			}
		}
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
 
		int conf, journal;
		cin >> conf;
		cin >> journal;
 
        //postavete gi soodvetnite vrednosti za statickite promenlivi
        for(int i=0; i<m; i++)
        {
            PhDStudent *p = dynamic_cast<PhDStudent*>(niza[i]);
            if(p!=0)
            {
                p->setConf(conf);
                p->setJor(journal);
            }
        }
 
		// pecatenje na site studenti
		cout << "\nLista na site studenti:\n";
		for (int i = 0; i < m; i++)
			cout << *niza[i];
	}
 
	return 0;
}
