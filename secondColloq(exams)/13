#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

class Delo {
private:
    char ime[50];
    int godina;
    char zemja[50];
public:
    Delo(char * ime = "", int godina = 0, char * zemja="") {
        strcpy(this->ime, ime);
        this->godina = godina;
        strcpy(this->zemja, zemja);
    }
    char * getIme() {
        return ime;
    }
    char * getZemja() {
        return zemja;
    }
    int getGodina() {
        return godina;
    }
    char setIme(char * novo) {
        strcpy(ime, novo);
    }
    char setZemja(char * nova) {
        strcpy(zemja, nova);
    }
    int setGodina(int novag) {
        godina = novag;
    }
    bool operator==(Delo &d) {
        if(strcmp(ime, d.ime) == 0) {
            return true;
        }
        return false;
    }
};

class Pretstava {
protected:
    Delo delo;
    int karti;
    char data[15];
public:
    Pretstava(Delo delo = 0, int karti = 0, char * data = "") {
        this->delo = delo;
        this->karti = karti;
        strcpy(this->data, data);
    }
    int getBroj() {
        return karti;
    }
    Delo getDelo() {
        return delo;
    }
    char * getData() {
        return data;
    }
    int setBroj(int nov) {
        karti = nov;
    }
    Delo setDelo(Delo d) {
        delo = d;
    }
    char setData(char * date) {
        strcpy(data, date);
    }
    virtual int cena()
    {
        if(delo.getGodina() > 1900)
        {
            if(strcmp(delo.getZemja(),"Italija") == 0)
            {
                return 150;
            }
            if(strcmp(delo.getZemja(),"Rusija") == 0)
            {
                return 200;
            }
            return 130;
        }
        if(delo.getGodina()>=1800 && delo.getGodina()<=1900)
        {
            if(strcmp(delo.getZemja(),"Italija") == 0)
            {
                return 175;
            }
            if(strcmp(delo.getZemja(),"Rusija") == 0)
            {
                return 225;
            }
            return 155;
        }
        else
        {
            if(strcmp(delo.getZemja(),"Italija") == 0)
            {
                return 200;
            }
            if(strcmp(delo.getZemja(),"Rusija") == 0)
            {
                return 250;
            }
            return 180;
        }
    }
};

class Opera : public Pretstava {
public:
    Opera(Delo delo = 0, int karti = 0, char * data = "") : Pretstava(delo, karti, data) {}
    
};

class Balet : public Pretstava {
private:
    static int dcena;
public:
    Balet(Delo delo = 0, int karti = 0, char * data = "") : Pretstava(delo, karti, data) {}
    static void setCenaBalet(int nova) {
        dcena = nova;
    }
    int cena() {
        return Pretstava::cena() + dcena;
    }
    
};

int Balet::dcena = 150;

int prihod (Pretstava ** pi, int n) {
    int total = 0;
    for(int i=0; i<n; i++) {
        total += pi[i]->cena() * pi[i]->getBroj();
    }
    return total;
}

int brojPretstaviNaDelo (Pretstava ** pi, int n, Delo &d) {
    int counter = 0;
    for(int i=0; i<n; i++) {
        if(pi[i]->getDelo() == d) {
            counter++;
        }
    }
    return counter;
} 


//citanje na delo
Delo readDelo(){
    char ime[50];
    int godina;
    char zemja[50];
    cin>>ime>>godina>>zemja;
    return Delo(ime,godina,zemja);
}
//citanje na pretstava
Pretstava* readPretstava(){
    int tip; //0 za Balet , 1 za Opera
    cin>>tip;
    Delo d=readDelo();
    int brojProdadeni;
    char data[15];
    cin>>brojProdadeni>>data;
    if (tip==0)  return new Balet(d,brojProdadeni,data);
    else return new Opera(d,brojProdadeni,data);
}
int main(){
    int test_case;
    cin>>test_case;
    
    switch(test_case){
    case 1:
    //Testiranje na klasite Opera i Balet
    {
        cout<<"======TEST CASE 1======="<<endl;
        Pretstava* p1=readPretstava();
        cout<<p1->getDelo().getIme()<<endl;
        Pretstava* p2=readPretstava();
        cout<<p2->getDelo().getIme()<<endl;
    }break;
        
    case 2:
    //Testiranje na  klasite Opera i Balet so cena
    {
        cout<<"======TEST CASE 2======="<<endl;
        Pretstava* p1=readPretstava();
        cout<<p1->cena()<<endl;
        Pretstava* p2=readPretstava();
        cout<<p2->cena()<<endl;
    }break;
    
    case 3:
    //Testiranje na operator ==
    {
        cout<<"======TEST CASE 3======="<<endl;
        Delo f1=readDelo();
        Delo f2=readDelo();
        Delo f3=readDelo();
        
        if (f1==f2) cout<<"Isti se"<<endl; else cout<<"Ne se isti"<<endl;
        if (f1==f3) cout<<"Isti se"<<endl; else cout<<"Ne se isti"<<endl;
    
    }break;
    
    case 4:
    //testiranje na funkcijata prihod
    {
        cout<<"======TEST CASE 4======="<<endl;
        int n;
        cin>>n;
        Pretstava **pole=new Pretstava*[n];
        for (int i=0;i<n;i++){
            pole[i]=readPretstava();
        
        }
        cout<<prihod(pole,n);
    }break;
    
    case 5:
    //testiranje na prihod so izmena na cena za 3d proekcii
    {
        cout<<"======TEST CASE 5======="<<endl;
        int cenaBalet;
        cin>>cenaBalet;
        Balet::setCenaBalet(cenaBalet);
        int n;
        cin>>n;
        Pretstava **pole=new Pretstava*[n];
        for (int i=0;i<n;i++){
            pole[i]=readPretstava();
        }
        cout<<prihod(pole,n);
        }break;
        
    case 6:
    //testiranje na brojPretstaviNaDelo
    {
        cout<<"======TEST CASE 6======="<<endl;
        int n;
        cin>>n;
        Pretstava **pole=new Pretstava*[n];
        for (int i=0;i<n;i++){
            pole[i]=readPretstava();
        }
        
        Delo f=readDelo();
        cout<<brojPretstaviNaDelo(pole,n,f);
    }break;
    
    };


return 0;
}
