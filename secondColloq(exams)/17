#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

class FudbalskaEkipa {
protected:
    char imeTrener[100];
    int golovi[10];
public:
    FudbalskaEkipa(char * imeTrener = "", int * golovi = 0) {
        strcpy(this->imeTrener, imeTrener);
        for(int i=0; i<10; i++) {
            this->golovi[i] = golovi[i];
        }
    }
    char * getIme() {
        return imeTrener;
    }
    virtual char * getImeKlub() = 0;
    friend ostream& operator<<(ostream &out, FudbalskaEkipa &fe) {
        out<<fe.getImeKlub()<<endl;
        out<<fe.imeTrener<<endl;
        out<<fe.uspeh()<<endl;
        return out;
    }
    virtual int uspeh() = 0;
    FudbalskaEkipa& operator+=(int number) {
        int tmp[10];
        int c = 0;
        for(int i=1; i<10; i++) {
            tmp[c++] = golovi[i];
        }
        tmp[c] = number;
        for(int i=0; i<10; i++) {
            golovi[i] = tmp[i];
        }
    }
    bool operator>(FudbalskaEkipa &fe) {
        return uspeh() > fe.uspeh();
    }

};

class Klub : public FudbalskaEkipa {
private:
    char ime[100];
    int tituli;
public:
    Klub(char * imeTrener = "", int * golovi = 0, char * ime ="", int tituli = 0) : FudbalskaEkipa(imeTrener, golovi) {
        this->tituli = tituli;
        strcpy(this->ime, ime);
    }
    int uspeh() {
        int total = 0;
        for(int i=0; i<10; i++) {
            total+=golovi[i];
        }
        return (total*3) + (tituli*1000);
    }
     char * getImeKlub()
    {
        return ime;
    }
    friend ostream& operator<<(ostream &out, Klub &fe) {
        out<<fe.ime<<endl;
        out<<fe.imeTrener<<endl;
        out<<fe.uspeh()<<endl;
        return out;
    }
};

class Reprezentacija : public FudbalskaEkipa {
private:
    char imeDrzava[100];
    int nastapi;
public:
    Reprezentacija(char * imeTrener = "", int * golovi = 0, char * imeDrzava = "", int nastapi = 0) : FudbalskaEkipa(imeTrener, golovi) {
        this->nastapi = nastapi;
        strcpy(this->imeDrzava, imeDrzava);
    }
     char *getImeKlub()
    {
        return imeDrzava;
    }
    int uspeh() {
        int total = 0;
        for(int i=0; i<10; i++) {
            total+=golovi[i];
        }
        return (total*3) + (nastapi*50);
    }
    friend ostream& operator<<(ostream &out, Reprezentacija &fe) {
        out<<fe.imeDrzava<<endl;
        out<<fe.imeTrener<<endl;
        out<<fe.uspeh()<<endl;
        return out;
    }
};

void najdobarTrener(FudbalskaEkipa ** ff, int n) {
    FudbalskaEkipa * tmp = ff[0];
    for(int i=1; i<n; i++) {
        if(*ff[i] > *tmp) {
            tmp = ff[i];
        }
    }
    cout<<*tmp;
}


int main(){

  int n;
    cin >> n;
    FudbalskaEkipa **ekipi = new FudbalskaEkipa*[n];
    char coach[100];
    int goals[10];
    char x[100];
    int tg;
    for (int i = 0; i < n; ++i) {
        int type;
        cin >> type;
        cin.getline(coach, 100);
        cin.getline(coach, 100);
        for (int j = 0; j < 10; ++j) {
            cin >> goals[j];
        }
        cin.getline(x, 100);
        cin.getline(x, 100);
        cin >> tg;
        if (type == 0) {
            ekipi[i] = new Klub(coach, goals, x, tg);
        } else if (type == 1) {
            ekipi[i] = new Reprezentacija(coach, goals, x, tg);
        }
    }
    cout << "===== SITE EKIPI =====" << endl;
    for (int i = 0; i < n; ++i) {
        cout << *ekipi[i];
    }
    cout << "===== DODADI GOLOVI =====" << endl;
    for (int i = 0; i < n; ++i) {
        int p;
        cin >> p;
        cout << "dodavam golovi: " << p << endl;
        *ekipi[i] += p;
    }
    cout << "===== SITE EKIPI =====" << endl;
    for (int i = 0; i < n; ++i) {
        cout << *ekipi[i];
    }
    cout << "===== NAJDOBAR TRENER =====" << endl;
    najdobarTrener(ekipi, n);
    for (int i = 0; i < n; ++i) {
        delete ekipi[i];
    }
    delete [] ekipi;
    return 0;

}
