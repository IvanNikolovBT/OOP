#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

class Book {
protected:
    char ISBN[20];
    char title[50];
    char author[30];
    double price;
public:
    Book(char * ISBN = "", char * title = "", char * author = "", double price = 0.0) {
        strcpy(this->ISBN, ISBN);
        strcpy(this->title, title);
        strcpy(this->author, author);
        this->price = price;
    }
    virtual double bookPrice () = 0;
    bool operator>(Book &b) {
        return bookPrice() > b.bookPrice();
    }
    friend ostream &operator<<(ostream & out, Book &b) {
        out<<b.ISBN<<": "<<b.title<<", "<<b.author<<" "<<b.bookPrice()<<endl;
        return out;
    }
    void setISBN(char isbn[20]) {
        strcpy(ISBN, isbn);
    }
};

class OnlineBook : public Book {
private:
    char * url;
    int MB;
public:
    OnlineBook(char * ISBN = "", char * title = "", char * author = "", double price = 0.0, char * url = "", int MB = 0) : Book (ISBN, title, author, price) {
        this->MB = MB;
        this->url = new char[strlen(url)];
        strcpy(this->url, url);
    }
    double bookPrice() {
        if(MB > 20) {
            return price*1.20;
        }
        return price;
    }
};

class PrintBook : public Book {
private:
    double mass;
    bool daliZaliha;
public:
    PrintBook(char * ISBN = "", char * title = "", char * author = "", double price = 0.0, double mass = 0.0, bool daliZaliha = false) : Book (ISBN, title, author, price) {
        this->mass = mass;
        this->daliZaliha = daliZaliha;
    }
    double bookPrice() {
        if(mass > 0.7) {
            return price * 1.15;
        }
        return price;
    }
};

void mostExpensiveBook (Book** books, int n) {
    Book * me = books[0];
    int onlinecounter = 0, printedcounter = 0;
    for(int i=0; i<n; i++) {
        OnlineBook * ob = dynamic_cast<OnlineBook*>(books[i]);
        if(ob != 0) {
                onlinecounter++;
        if(ob->bookPrice() > me->bookPrice()) me = ob;
        }
        else {
            PrintBook * pb = dynamic_cast<PrintBook*>(books[i]);
                if(pb != 0) {
                    printedcounter++;
                    if(pb->bookPrice() > me->bookPrice()) me = pb;
            }
        }
    }
    cout<<"FINKI-Education"<<endl;
    cout<<"Total number of online books: "<<onlinecounter<<endl;
    cout<<"Total number of print books: "<<printedcounter<<endl;
    cout<<"The most expensive book is: "<<endl;
    cout<<*me<<endl;
}

int main(){

	char isbn[20], title[50], author[30], url[100];
	int size, tip;
	float price, weight;
	bool inStock;
	Book  **books;
	int n;

	int testCase;
	cin >> testCase;

	if (testCase == 1){
		cout << "====== Testing OnlineBook class ======" << endl;
		cin >> n;
		books = new Book *[n];

		for (int i = 0; i < n; i++){
			cin >> isbn;
			cin.get();
			cin.getline(title, 50);
			cin.getline(author, 30);
			cin >> price;
			cin >> url;
			cin >> size;
			cout << "CONSTRUCTOR" << endl;
			books[i] = new OnlineBook(isbn, title, author, price, url, size);
			cout << "OPERATOR <<" << endl;
			cout << *books[i];
		}
		cout << "OPERATOR >" << endl;
		cout << "Rezultat od sporedbata e: " << endl;
		if (*books[0] > *books[1])
			cout << *books[0];
		else
			cout << *books[1];
	}
	if (testCase == 2){
		cout << "====== Testing OnlineBook CONSTRUCTORS ======" << endl;
		cin >> isbn;
		cin.get();
		cin.getline(title, 50);
		cin.getline(author, 30);
		cin >> price;
		cin >> url;
		cin >> size;
		cout << "CONSTRUCTOR" << endl;
		OnlineBook ob1(isbn, title, author, price, url, size);
		cout << ob1 << endl;
		cout << "COPY CONSTRUCTOR" << endl;
		OnlineBook ob2(ob1);
		cin >> isbn;
		ob2.setISBN(isbn);
		cout << ob1 << endl;
		cout << ob2 << endl;
		cout << "OPERATOR =" << endl;
		ob1 = ob2;
		cin >> isbn;
		ob2.setISBN(isbn);
		cout << ob1 << endl;
		cout << ob2 << endl;
	}
	if (testCase == 3){
		cout << "====== Testing PrintBook class ======" << endl;
		cin >> n;
		books = new Book *[n];

		for (int i = 0; i < n; i++){
			cin >> isbn;
			cin.get();
			cin.getline(title, 50);
			cin.getline(author, 30);
			cin >> price;
			cin >> weight;
			cin >> inStock;
			cout << "CONSTRUCTOR" << endl;
			books[i] = new PrintBook(isbn, title, author, price, weight, inStock);
			cout << "OPERATOR <<" << endl;
			cout << *books[i];
		}
		cout << "OPERATOR >" << endl;
		cout << "Rezultat od sporedbata e: " << endl;
		if (*books[0] > *books[1])
			cout << *books[0];
		else
			cout << *books[1];
	}
	if (testCase == 4){
		cout << "====== Testing method mostExpensiveBook() ======" << endl;
		cin >> n;
		books = new Book *[n];

		for (int i = 0; i<n; i++){

			cin >> tip >> isbn;
			cin.get();
			cin.getline(title, 50);
			cin.getline(author, 30);
			cin >> price;
			if (tip == 1) {

				cin >> url;
				cin >> size;

				books[i] = new OnlineBook(isbn, title, author, price, url, size);

			}
			else {
				cin >> weight;
				cin >> inStock;

				books[i] = new PrintBook(isbn, title, author, price, weight, inStock);
			}
		}

		mostExpensiveBook(books, n);
	}

	for (int i = 0; i<n; i++) delete books[i];
		delete[] books;
	return 0;
}
