#include <iostream>
#include <cstring>
using namespace std;

class NBAPlayer {
protected:
    char * ime;
    char tim[40];
    double brojPoeni;
    double asistencii;
    double skokovi;
    void copy(const NBAPlayer &np) {
        strcpy(tim, np.tim);
        ime = new char[strlen(np.ime)+1];
        strcpy(ime, np.ime);
        brojPoeni = np.brojPoeni;
        asistencii = np.asistencii;
        skokovi = np.skokovi;
    }
public:
    NBAPlayer() {
        brojPoeni = 0;
        asistencii = 0;
        skokovi = 0;
        strcpy(tim,"");
        ime = new char[0];
    }
    NBAPlayer(char * name, char * team, double points, double assists, double rebounds) {
        strcpy(tim, team);
        ime = new char[strlen(name)+1];
        strcpy(ime, name);
        brojPoeni = points;
        asistencii = assists;
        skokovi = rebounds;
    }
    NBAPlayer(const NBAPlayer &np) {
       copy(np);
    }
    NBAPlayer& operator=(const NBAPlayer &np) {
        if(this != &np) {
        delete [] ime;
        copy(np);
        }
        return * this;
    }
    ~NBAPlayer() {
        delete [] ime;
    }
    double rating() {
        return ((brojPoeni*0.45) + (asistencii*0.30) + (skokovi*0.25));
    }
    void print() {
        cout<<ime<<" - "<<tim<<endl;
        cout<<"Points: "<<brojPoeni<<endl;
        cout<<"Assists: "<<asistencii<<endl;
        cout<<"Rebounds: "<<skokovi<<endl;
        cout<<"Rating: "<<rating()<<endl;
    }
};

class AllStarPlayer : public NBAPlayer {
private:
    double avgPoints;
    double avgAssists;
    double avgRebounds;
    void copyA(const AllStarPlayer &ap) {
        avgPoints = ap.avgPoints;
        avgAssists = ap.avgAssists;
        avgRebounds = ap.avgRebounds;
    }
public:
    AllStarPlayer() : NBAPlayer() {
        avgPoints = 0;
        avgAssists = 0;
        avgRebounds = 0;
    }
    AllStarPlayer(char * name, char * team, double points, double assists, double rebounds, double avgp, double avga, double avgr)
    : NBAPlayer(name, team, points, assists, rebounds) {
        avgPoints = avgp;
        avgAssists = avga;
        avgRebounds = avgr;
    }
    AllStarPlayer(const NBAPlayer &na, double avgp, double avga, double avgr) : NBAPlayer(na) {
        avgPoints = avgp;
        avgAssists = avga;
        avgRebounds = avgr;
    }
    AllStarPlayer(const AllStarPlayer &ap) : NBAPlayer(ap) {
        copyA(ap);
    }
    AllStarPlayer& operator=(const AllStarPlayer &ap) {
        if(this != &ap) {
            delete [] ime;
            NBAPlayer::copy(ap);
            copyA(ap);
        }
        return * this;
    }
    double allStarRating() {
        return ((avgPoints*0.30) + (avgAssists*0.40) + (avgRebounds*0.30));
    }
    double rating() {
        return (NBAPlayer::rating() + allStarRating())/2;
    }
    void print() {
        NBAPlayer::print();
        cout<<"All Star Rating: "<<allStarRating()<<endl;
        cout<<"New Rating: "<<rating()<<endl;
    }
};

int main() {

  char name[50];
  char team[40];
  double points;
  double assists;
  double rebounds;
  double allStarPoints;
  double allStarAssists;
  double allStarRebounds;

  NBAPlayer * players = new NBAPlayer[5];
  AllStarPlayer * asPlayers = new AllStarPlayer[5];
  int n;
  cin >> n;

  if (n == 1) {

    cout << "NBA PLAYERS:" << endl;
    cout << "=====================================" << endl;
    for (int i = 0; i < 5; ++i) {
      cin >> name >> team >> points >> assists >> rebounds;
      players[i] = NBAPlayer(name,team,points,assists,rebounds);
      players[i].print();
    }
  }
  else if (n == 2) {

    for (int i=0; i < 5; ++i){
      cin >> name >> team >> points >> assists >> rebounds;
      cin >> allStarPoints >> allStarAssists >> allStarRebounds;
      players[i] = NBAPlayer(name,team,points,assists,rebounds);
      asPlayers[i] = AllStarPlayer(players[i],allStarPoints,allStarAssists,allStarRebounds);
    }

    cout << "NBA PLAYERS:" << endl;
    cout << "=====================================" << endl;
    for (int i=0; i < 5; ++i)
      players[i].print();

    cout << "ALL STAR PLAYERS:" << endl;
    cout << "=====================================" << endl;
    for (int i=0; i < 5; ++i)
      asPlayers[i].print();

    }
    else if (n == 3) {

      for (int i=0; i < 5; ++i){
        cin >> name >> team >> points >> assists >> rebounds;
        cin >> allStarPoints >> allStarAssists >> allStarRebounds;
        asPlayers[i] = AllStarPlayer(name, team, points, assists, rebounds,
                                     allStarPoints,allStarAssists,allStarRebounds);
      }
      cout << "ALL STAR PLAYERS:" << endl;
      cout << "=====================================" << endl;
      for (int i=0; i < 5; ++i)
        asPlayers[i].print();

    }

    delete [] players;
    delete [] asPlayers;
}
