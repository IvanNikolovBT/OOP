#include <iostream>
#include <cstring>
using namespace std;

class Lekar {
protected:
    int faksimil;
    char ime[10];
    char prezime[10];
    double pocetnaPlata;
public:
    Lekar () {
        faksimil = 0;
        strcpy(ime,"");
        strcpy(prezime,"");
        pocetnaPlata = 0;
    }
    Lekar(int f, char * i, char * p, double pl) {
        faksimil = f;
        pocetnaPlata = pl;
        strcpy(ime,i);
        strcpy(prezime,p);
    }
    Lekar(const Lekar &f) {
        faksimil = f.faksimil;
        pocetnaPlata = f.pocetnaPlata;
        strcpy(ime,f.ime);
        strcpy(prezime,f.prezime);
    }
    void pecati() {
        cout<<faksimil<<": "<<ime<<" "<<prezime<<endl;
    }
    double plata () {
        return pocetnaPlata;
    }
};

class MaticenLekar : public Lekar {
private:
    int pacienti;
    double * kotizacii;
public:
    MaticenLekar () : Lekar() {
        pacienti = 0;
        kotizacii = new double[0];
    }
    MaticenLekar(int f, char * i, char * p, double pl, int pacienti, double * kotizacii) : Lekar(f,i,p,pl) {
        this->pacienti = pacienti;
        this->kotizacii = new double[pacienti];
        for(int i=0;i<pacienti;i++)
        {
            this->kotizacii[i]=kotizacii[i];
        }
    }
    MaticenLekar(const Lekar &l, int pacienti, double * kotizacii) : Lekar(l) {
        this->pacienti = pacienti;
        this->kotizacii = new double[pacienti];
        for(int i=0;i<pacienti;i++)
        {
            this->kotizacii[i]=kotizacii[i];
        }
    }
    MaticenLekar(const MaticenLekar &ml) {
        pacienti=ml.pacienti;
        kotizacii=new double[pacienti];
        for(int i=0;i<pacienti;i++)
        {
            kotizacii[i]=ml.kotizacii[i];
        }
        strcpy(ime,ml.ime);
        strcpy(prezime,ml.prezime);
        pocetnaPlata=ml.pocetnaPlata;
        faksimil=ml.faksimil;
    }
    MaticenLekar& operator=(const MaticenLekar &ml) {
        if(this != &ml) {
        pacienti=ml.pacienti;
        delete [] kotizacii;
        kotizacii=new double[pacienti];
        for(int i=0;i<pacienti;i++)
        {
            kotizacii[i]=ml.kotizacii[i];
        }
        strcpy(ime,ml.ime);
        strcpy(prezime,ml.prezime);
        pocetnaPlata=ml.pocetnaPlata;
        faksimil=ml.faksimil;
        }
        return * this;
    }
    ~MaticenLekar () {
        delete [] kotizacii;
    }
    double Kotizacija()
    {
        double vkupno=0;
        for(int i=0;i<pacienti;i++)
        {
            vkupno+=kotizacii[i];
        }
        return(vkupno/pacienti);
    }
    double plata()
    {
        return pocetnaPlata + (0.3 * Kotizacija());
    }
    void pecati()
    {
        Lekar::pecati();
        cout<<"Prosek na kotizacii: "<<Kotizacija()<<endl;
    }
    
};

int main() {
	int n;
	cin>>n;
	int pacienti;
	double kotizacii[100];
	int faksimil;
	char ime [20];
	char prezime [20];
	double osnovnaPlata;
	
	Lekar * lekari = new Lekar [n];
	MaticenLekar * maticni = new MaticenLekar [n];
	
	for (int i=0;i<n;i++){
		cin >> faksimil >> ime >> prezime >> osnovnaPlata;
		lekari[i] = Lekar(faksimil,ime,prezime,osnovnaPlata);		
	}
	
	for (int i=0;i<n;i++){
		cin >> pacienti;
		for (int j=0;j<pacienti;j++){
			cin >> kotizacii[j];
		}
		maticni[i]=MaticenLekar(lekari[i],pacienti,kotizacii);
	}
	
	int testCase;
	cin>>testCase;
	
	if (testCase==1){
		cout<<"===TESTIRANJE NA KLASATA LEKAR==="<<endl;
		for (int i=0;i<n;i++){
			lekari[i].pecati();
			cout<<"Osnovnata plata na gorenavedeniot lekar e: "<<lekari[i].plata()<<endl;
		}
	}
	else {
		cout<<"===TESTIRANJE NA KLASATA MATICENLEKAR==="<<endl;
		for (int i=0;i<n;i++){
			maticni[i].pecati();
			cout<<"Platata na gorenavedeniot maticen lekar e: "<<maticni[i].plata()<<endl;
		}
	}
	
	delete [] lekari;
	delete [] maticni;
	
	return 0;
}
