1. 
#include <stdio.h>
 
struct date{
int den;
int mesec;
int godina;
};
 
typedef struct date date;
 
 
int compare(date d1, date d2)
{
    if(d1.godina>d2.godina)
    {
        return 1;
    }
    else if(d2.godina>d1.godina){
        return -1;
    }
    else{
        if(d1.mesec>d2.mesec)
        {
            return 1;
        }
        else if(d2.mesec>d1.mesec)
        {
            return -1;
        }
        else{
            if(d1.den>d2.den)
            {
                return 1;
            }
            else if(d2.den>d1.den)
            {
                return -1;
            }
            else{
                return 0;
            }
        }
 
    }
}
 
int razlika(date d1, date d2)
{
    int raz = d1.den - d2.den;
    raz += (d1.mesec-d2.mesec) * 30;
    raz += (d1.godina - d2.godina) * 365;
    return raz;
}
 
 
int main()
{
    date d1,d2;
    scanf("%d.%d.%d",&d1.den,&d1.mesec,&d1.godina);
    scanf("%d.%d.%d",&d2.den,&d2.mesec,&d2.godina);
    if(compare(d1,d2)==1)
    {
        int raz = razlika(d1,d2);
        printf("Razlika vo denovi: %d",raz);
    }
    else if(compare(d1,d2)==-1)
    {
        int raz = razlika(d2,d1);
        printf("Razlika vo denovi: %d",raz);
    }
    else
    {
        printf("Datite se ednakvi");
    }
}

2.
#include <stdio.h>
 
typedef struct vector{
float x;
float y;
float z;
}vector;
 
float skalaren_proizvod(vector v1, vector v2)
{
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}
 
vector vektorski_proizvod(vector v1, vector v2)
{
    vector rezultat;
    rezultat.x = v1.y * v2.z - v1.z * v2.y;
    rezultat.y = v1.z * v2.x - v1.x * v2.z;
    rezultat.z = v1.x * v2.y - v1.y * v2.x;
    return rezultat;
}
 
int main()
{
  vector v1 = {1.5, 3.7, 1.2};
  vector v2 = {6.6, 2.2, 3.3};
  printf("Skalaren: %.2f\n",skalaren_proizvod(v1,v2));
  vector rez = vektorski_proizvod(v1,v2);
  printf("Vektorski: [%.2f, %.2f, %.2f]",
         rez.x, rez.y, rez.z);
 
}

3.
#include <stdio.h>
#include <math.h>
 
typedef struct kompleksen_broj
{
    float real;
    float imag;
}kompleksen;
 
kompleksen soberi(kompleksen b1, kompleksen b2)
{
    kompleksen rez = b1;
    rez.real = b1.real + b2.real;
    rez.imag = b1.imag + b2.imag;
    return rez;
}
 
kompleksen odzemi(kompleksen b1, kompleksen b2)
{
    kompleksen rez = b1;
    rez.real = b1.real - b2.real;
    rez.imag = b1.imag - b2.imag;
    return rez;
}
 
kompleksen pomnozi(kompleksen b1, kompleksen b2)
{
    kompleksen rez;
    rez.real = b1.real * b2.real - b1.imag * b2.imag;
    rez.imag = b1.real * b2.imag + b1.imag * b2.real;
    return rez;
}
 
void print(kompleksen br)
{
    printf("%.2f",br.real);
    if(br.imag>=0)
    {
        printf("+j%.2f\n",br.imag);
    }
    else {
        printf("-j%.2f\n",fabs(br.imag));
    }
}
 
int main()
{
    kompleksen b1,b2;
    scanf("%f %f",&b1.real, &b1.imag);
    scanf("%f %f",&b2.real, &b2.imag);
    kompleksen rez = soberi(b1,b2);
    printf("a + b = ");
    print(rez);
 
    rez = odzemi(b1,b2);
    printf("a - b = ");
    print(rez);
 
 
    rez = pomnozi(b1,b2);
    printf("a * b = ");
    print(rez);
 
 
}

4.
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
 
typedef struct student{
    char ime[50];
    char prezime[50];
    int indeks;
    int poeni;
}student;
 
 
void smeniPocetnaBukva(char * str){
    str[0] = toupper(str[0]);
    int i;
    for(i=1;i<strlen(str);i++)
    {
        str[i] = tolower(str[i]);
    }
}
 
void sort(student niza [], int n)
{
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n-1-i;j++)
        {
            if(niza[j].poeni<niza[j+1].poeni)
            {
                student temp = niza[j];
                niza[j] = niza[j+1];
                niza[j+1] = temp;
            }
        }
    }
}
 
 
int main()
{
    student niza[100];
    int i,n;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        scanf("%s",niza[i].ime);
        scanf("%s",niza[i].prezime);
        scanf("%d",&niza[i].indeks);
        niza[i].poeni = 0;
        int j, zad;
        for(j=0;j<4;j++)
        {
            scanf("%d",&zad);
            niza[i].poeni+=zad;
        }
        smeniPocetnaBukva(niza[i].ime);
        smeniPocetnaBukva(niza[i].prezime);
    }
    sort(niza,n);
 
    for(i=0;i<n;i++)
    {
        printf("%d. %s %s\t%d\t%d\n",i+1,
               niza[i].ime,niza[i].prezime,niza[i].indeks,
               niza[i].poeni);
    }
 
}

5.
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
 
typedef struct grad{
    char ime[50];
    long brZiteli;
}grad;
 
typedef struct pretsedatel{
    char ime[50];
    char partija[50];
 
}pres;
 
typedef struct drzava{
    char ime[50];
    pres president;
    long brZiteli;
    grad glavenGrad;
}drzava;
 
 
int main()
{
    drzava drzavi[50];
    int i,n,maxI, max;
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        //drzava
        scanf("%s",drzavi[i].ime);
        scanf("%d",&drzavi[i].brZiteli);
        //pretsedatel
        scanf("%s",drzavi[i].president.ime);
        scanf("%s",drzavi[i].president.partija);
        //glavenGrad
        scanf("%s",drzavi[i].glavenGrad.ime);
        scanf("%d",&drzavi[i].glavenGrad.brZiteli);
    }
    maxI = 0;
    max = drzavi[0].glavenGrad.brZiteli;
    for(i=0;i<n;i++)
    {
        if(drzavi[i].glavenGrad.brZiteli > max)
        {
            max = drzavi[i].glavenGrad.brZiteli;
            maxI = i;
        }
    }
    printf("Ime na pretsedatel na drzava so najmogu ziteli: %s"
           ,drzavi[maxI].president.ime);
 
 
}
..
