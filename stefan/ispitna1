#include<iostream>
#include<cstring>

using namespace std;

class MediaSegment {
protected:
    enum {STR_S = 100};
    char author[STR_S];
    unsigned int duration;
    char title[STR_S];
    unsigned int size;
public:
    MediaSegment(const char* _title = "", const char * _author = "",
                 unsigned int _duration=0, unsigned int _size = 0){

        strncpy(this->author, _author, STR_S-1);
        strncpy(this->title, _title, STR_S-1);
        this->author[STR_S-1] = this->title[STR_S-1] = '\0';

        duration = _duration;
        size = _size;
    }

    virtual float price() const = 0;

    virtual ~MediaSegment(){};

    //friend ostream& operator<<(ostream &o, const MediaSegment& p);

};

enum AudioFormat {mp3, wav, ogg, flac };

class AudioRecording : public virtual MediaSegment {
protected:
    AudioFormat format;
    short channels;
public:
    AudioRecording(const char* _title = "", const char * _author = "",
                 unsigned int _duration=0, unsigned int _size = 0,
                 int _format = 0, int _channels = 1) :
    MediaSegment(_title, _author, _duration, _size){
        this->format = AudioFormat(_format);
        this->channels = _channels;
    }

    float price() const {
        float retval = channels * duration;

        if (format == AudioFormat::flac) {
            retval *= 1.5f;
        }

        return retval;
    }

    friend ostream& operator<<(ostream &o, const AudioRecording& p){
        o<<p.title <<" - " << p.author << " - " << p.duration <<" - "
         << p.size << " - " << p.price() << '\n';

        return o;
    }

    virtual ~AudioRecording(){};

};

enum VideoCompression { x264, Theora, AV1};

class VideoRecording : public virtual MediaSegment {
protected:
    VideoCompression compression;
    unsigned int width;
public:
    VideoRecording(const char* _title = "", const char * _author = "",
                 unsigned int _duration=0, unsigned int _size = 0,
                 int _width= 0, int _compression = 1) :
    MediaSegment(_title, _author, _duration, _size){
        this->width = _width;
        this->compression = VideoCompression(_compression);
    }

    virtual float price() const {

        float retval = duration;

        if (width > 1920) {
            retval *= 170;
        }
        else {
            retval *= 100;
        }

        if (compression == VideoCompression::x264) {
            retval *= 1.5f;
        }
        else if (compression == VideoCompression::Theora){
            retval *= 0.9f;
        }

        return retval;
    }

    friend ostream& operator<<(ostream &o, const VideoRecording& p){
        o<<p.title <<" - " << p.author << " - " << p.duration <<" - "
         << p.size << " - " << p.width << " - " << p.price() << '\n';

        return o;
    }


    virtual ~VideoRecording(){};

};

class MusicVideo : public AudioRecording, public VideoRecording{
protected:
    char publication_date[9];

public:
    MusicVideo(const char* _title = "", const char * _author = "",
               unsigned int _duration=0, unsigned int _size = 0,
               int _format = 0, int _channels = 1, int _width= 0,
               int _compression = 1, const char* _pubdate= "") :
        MediaSegment(_title, _author, _duration, _size),
        AudioRecording(_title, _author, _duration, _size, _format, _channels),
        VideoRecording(_title, _author, _duration, _size, _width, _compression)
        {
            strncpy(this->publication_date, _pubdate, 8);
            this->publication_date[8] = '\0';
        }

    float price () const{
        float retval = AudioRecording::price() + VideoRecording::price();
        if (strcmp(&publication_date[4],"2010")>0){
            retval *= 1.3f;
        }
        return retval;
    }

    friend ostream& operator<<(ostream &o, const MusicVideo& p){
        o<<p.title <<" - " << p.author << " - " <<p.publication_date << " - "
         << p.duration << " - " << p.price() <<'\n';
        return o;
    }
};


float total_price(MediaSegment **ms, int num){

    float retval = 0;

    for (int i=0; i<num; i++){
        retval += ms[i]->price();
    }

    return retval;
}


MusicVideo cheapest_music_video(MediaSegment **ms, int num){

    int m_index = -1;

    MusicVideo* mv, *m_mv = nullptr;

    for (int i=0; i<num; i++){

        mv = dynamic_cast< MusicVideo* >(ms[i]);

        if (mv) {
            if (m_index == -1 ){
                m_index = i;
                m_mv = mv;
            }
            else if( mv->price() < m_mv->price() ) {
                m_index = i;
                m_mv = mv;
            }
        }
    }

    return *m_mv;

}



int main() {

  int test_case_num;
  cin>>test_case_num;


  // for MediaSegment
  char title[100];
  char author[1000];
  unsigned int size;
  unsigned int duration;


  // for AudioRecording
  //-------------------
  unsigned short channels;

  // AudioFormat:
  // 0 - mp3
  // 1 - wav
  // 2 - ogg
  // 3 - flac
  unsigned short format;


  // for VideoRecording
  //-------------------
  unsigned short width;

  // VideoCompression:
  // 0 - x264
  // 1 - Theora
  // 2 - AV1
  int compression;


  // for MusicVideo
  //-------------------
  char publication_date[9];


  if (test_case_num == 1){
    cout<<"Testing class AudioRecording and operator<<"<<std::endl;
    cin.get();
    cin.getline(title,100);
    cin.getline(author, 100);
    //cin.get();
    cin >> duration >> size;
    cin >> format >> channels;

    AudioRecording a(title, author, duration, size, format, channels);

    cout<<a;

  }

  else if (test_case_num == 2){
    cout<<"Testing class VideoRecording and operator<<"<<std::endl;
    cin.get();
    cin.getline(title,100);
    cin.getline(author, 100);
    //cin.get();
    cin >> duration >> size;
    cin >> width >> compression;

    VideoRecording v(title, author, duration, size, width, compression);

    cout<<v;

  }

  else if (test_case_num == 3){
    cout<<"Testing class MusicVideo and operator<<"<<std::endl;

    cin.get();
    cin.getline(title,100);
    cin.getline(author, 100);
    //cin.get();
    cin >> duration >> size;

    cin >> format >> channels;
    cin >> width >> compression;

    cin.get();
    cin.getline(publication_date, 9);
    MusicVideo mv(title, author, duration, size, format, channels, width, compression, publication_date);

    cout << mv;
  }

  else if (test_case_num == 4){
    cout<<"Testing function: total_price "<<std::endl;

    MediaSegment ** m;

    int num_media_segments;
    cin >> num_media_segments;

    // 1 - AudioRecording
    // 2 - VideoRecording
    // 3 - MusicVideo
    short media_type;

    m = new MediaSegment*[num_media_segments];

    for (int i=0; i<num_media_segments; i++) {

      cin >> media_type;

      cin.get();
      cin.getline(title,100);
      cin.getline(author, 100);
      //cin.get();
      cin >> duration >> size;

      switch(media_type) {
      case 1:
              cin >> format >> channels;
              m[i] = new AudioRecording(title, author, duration, size, format, channels);
          break;
      case 2:
              cin >> width >> compression;
              m[i] = new VideoRecording(title, author, duration, size, width, compression);
          break;
      case 3:
              cin >> format >> channels;
              cin >> width >> compression;
              cin.get();
              cin.getline(publication_date, 9);
              m[i] = new MusicVideo(title, author, duration, size, format, channels, width, compression, publication_date);
          break;
      }
    }

    //for (int i=0;i<num_media_segments; i++){
    //    cout << *m[i];
    //}

    cout<< "Total price is: " << total_price(m, num_media_segments);

    delete [] m;

  }
  else if (test_case_num == 5){
    cout<<"Testing function: cheapest_music_video "<<std::endl;

    MediaSegment ** m;

    int num_media_segments;
    cin >> num_media_segments;

    // 1 - AudioRecording
    // 2 - VideoRecording
    // 3 - MusicVideo
    short media_type;

    m = new MediaSegment*[num_media_segments];

    for (int i=0; i<num_media_segments; i++) {

      cin >> media_type;

      cin.get();
      cin.getline(title,100);
      cin.getline(author, 100);
      //cin.get();
      cin >> duration >> size;

      switch(media_type) {
      case 1:
              cin >> format >> channels;
              m[i] = new AudioRecording(title, author, duration, size, format, channels);
          break;
      case 2:
              cin >> width >> compression;
              m[i] = new VideoRecording(title, author, duration, size, width, compression);
          break;
      case 3:
              cin >> format >> channels;
              cin >> width >> compression;
              cin.get();
              cin.getline(publication_date, 9);
              m[i] = new MusicVideo(title, author, duration, size, format, channels, width, compression, publication_date);
          break;
      }
    }

    cout << cheapest_music_video(m, num_media_segments);

    delete [] m;
  }

  return 0;
}
