#include<iostream>
#include<cstring>

using namespace std;

class CovidVaccine {
protected:
    char proizvoditel[100];
    char * ime;
    double koef;
public:
    CovidVaccine(char * proizvoditel = "", char * ime = "", double koef = 0) {
        strcpy(this->proizvoditel, proizvoditel);
        this->ime = new char[strlen(ime+1)];
        strcpy(this->ime, ime);
        this->koef = koef;
    }
    virtual double calculateVaccineEfficiency() = 0;
    bool operator<=(CovidVaccine &gv) {
        return (calculateVaccineEfficiency() <= gv.calculateVaccineEfficiency());
    }
};

class GeneticVaccine : public CovidVaccine {
private:
    short mehanizam;
public:
    GeneticVaccine(char * proizvoditel = "", char * ime = "", double koef = 0, short mehanizam = 0) : CovidVaccine(proizvoditel,ime,koef) {
        this->mehanizam = mehanizam;
    }
    double calculateVaccineEfficiency() {
        double sum = koef;
        if(mehanizam == 0) {
            sum*=1.35;
        }
        else if(mehanizam == 1) {
            sum*=1.55;
        }
        return sum;
    }
    friend ostream& operator<<(ostream &out, GeneticVaccine &gv) {
        out<<"Vaccine info: "<<gv.ime<<" - "<<gv.proizvoditel<<" - "<<gv.calculateVaccineEfficiency()<<endl;
        out<<"Mechanism for storing genetic information: ";
        if(gv.mehanizam == 0) out<<"RNA"<<endl;
        else if(gv.mehanizam == 1) out<<"DNA"<<endl;
        return out;
    }
};

class InactivatedVaccine : public CovidVaccine {
private:
    short sostojka;
public:
    InactivatedVaccine(char * proizvoditel = "", char * ime = "", double koef = 0, short sostojka = 0) : CovidVaccine(proizvoditel,ime,koef) {
        this->sostojka = sostojka;
    }
    double calculateVaccineEfficiency() {
        double sum=koef;
        if(sostojka == 0) {
            sum*=0.9;
        }
        else if(sostojka == 1) {
            sum*=1.12;
        }
        else if(sostojka == 2) {
            sum*=0.85;
        }
        else if(sostojka == 3) {
            sum*=1.2;
        }
        return sum;
    }
    friend ostream& operator<<(ostream &out, InactivatedVaccine &iv) {
        out<<"Vaccine info: "<<iv.ime<<" - "<<iv.proizvoditel<<" - "<<iv.calculateVaccineEfficiency()<<endl;
        out<<"The vaccine consists of the following ingredient: ";
        switch(iv.sostojka) {
            case 0:
                {
                    out<<"DMG"<<endl;
                    break;
                }
            case 1:
                {
                    out<<"PEG"<<endl;
                    break;
                }
            case 2:
                {
                    out<<"SM_102"<<endl;
                    break;
                }
            case 3:
                {
                    out<<"DPSC"<<endl;
                    break;
                }
        }
        return out;
    }
};

void mostEffectiveInactivatedVaccine (CovidVaccine  ** cv, int n) {
    int maxI = -1;
    for(int i=0; i<n; i++) {
        InactivatedVaccine * iv = dynamic_cast<InactivatedVaccine *>(cv[i]);
        if(iv != 0) {
            if(maxI == -1) {
                maxI = i;
                continue;
            }
            if(cv[maxI]->calculateVaccineEfficiency() <= iv->calculateVaccineEfficiency()) {
                maxI = i;
            }
        }
    }
    InactivatedVaccine * is = dynamic_cast<InactivatedVaccine *>(cv[maxI]);
    cout<<*is;
}

int main() {
    int test_case;

    cin >> test_case;

    //For CovidVaccine
    char manufacturer[100];
    char vaccineName[100];
    float basicEfficiencyCoefficient;

    //For GeneticVaccine
    unsigned short geneticMechanism; // 0 -> RNA, 1 -> DNA

    //For InactivatedVaccine
    unsigned short constituentIngredient; //0 -> DMG, 1 -> PEG, 2 -> SM_102, 3 -> DPSC


    if (test_case == 1) {
        // Test Case GeneticVaccine - Constructor, operator <<, calculateVaccineEfficiency
        cout << "Testing class GeneticVaccine, operator<< and calculateVaccineEfficiency" << endl;
        cin.get();
        cin.getline(manufacturer, 100);
        cin.getline(vaccineName, 100);
        cin >> basicEfficiencyCoefficient;
        cin >> geneticMechanism;

        GeneticVaccine gv(manufacturer, vaccineName, basicEfficiencyCoefficient, geneticMechanism);

        cout << gv;
    } else if (test_case == 2) {
        // Test Case InactivatedVaccine - Constructor, operator <<, calculateVaccineEfficiency
        cout << "Testing class InactivatedVaccine, operator<< and calculateVaccineEfficiency" << endl;
        cin.get();
        cin.getline(manufacturer, 100);
        cin.getline(vaccineName, 100);
        cin >> basicEfficiencyCoefficient;
        cin >> constituentIngredient;

        InactivatedVaccine iv(manufacturer, vaccineName, basicEfficiencyCoefficient, constituentIngredient);

        cout << iv;
    } else if (test_case == 3) {
        cout << "Testing operator <=" << endl;

        cin.get();
        cin.getline(manufacturer, 100);
        cin.getline(vaccineName, 100);
        cin >> basicEfficiencyCoefficient;
        cin >> geneticMechanism;

        GeneticVaccine gv(manufacturer, vaccineName, basicEfficiencyCoefficient, geneticMechanism);

        cin.get();
        cin.getline(manufacturer, 100);
        cin.getline(vaccineName, 100);
        cin >> basicEfficiencyCoefficient;
        cin >> constituentIngredient;

        InactivatedVaccine iv(manufacturer, vaccineName, basicEfficiencyCoefficient, constituentIngredient);

        if (gv <= iv) {
            cout << iv;
        } else {
            cout << gv;
        }
    } else if (test_case == 4) {
        cout << "Testing operator <=" << endl;

        cin.get();
        cin.getline(manufacturer, 100);
        cin.getline(vaccineName, 100);
        cin >> basicEfficiencyCoefficient;
        cin >> geneticMechanism;

        GeneticVaccine gv1(manufacturer, vaccineName, basicEfficiencyCoefficient, geneticMechanism);

        cin.get();
        cin.getline(manufacturer, 100);
        cin.getline(vaccineName, 100);
        cin >> basicEfficiencyCoefficient;
        cin >> geneticMechanism;

        GeneticVaccine gv2(manufacturer, vaccineName, basicEfficiencyCoefficient, geneticMechanism);

        if (gv1 <= gv2) {
            cout << gv2;
        } else {
            cout << gv1;
        }
    } else if (test_case == 5) {
        cout << "Testing function: mostEffectiveInactivatedVaccine " << endl;

        //1 - GeneticVaccine
        //2 - InactivatedVaccine
        short vaccineType;

        int number_of_vaccines;
        CovidVaccine **vaccine_array;

        cin >> number_of_vaccines;

        vaccine_array = new CovidVaccine *[number_of_vaccines];

        for (int i = 0; i < number_of_vaccines; ++i) {
            cin >> vaccineType;

            cin.get();
            cin.getline(manufacturer, 100);
            cin.getline(vaccineName, 100);
            cin >> basicEfficiencyCoefficient;

            switch (vaccineType) {
                case 1:
                    cin >> geneticMechanism;
                    vaccine_array[i] = new GeneticVaccine(manufacturer, vaccineName, basicEfficiencyCoefficient,
                                                          geneticMechanism);
                    break;
                case 2:
                    cin >> constituentIngredient;
                    vaccine_array[i] = new InactivatedVaccine(manufacturer, vaccineName, basicEfficiencyCoefficient,
                                                              constituentIngredient);
                    break;
            }

        }

        mostEffectiveInactivatedVaccine(vaccine_array, number_of_vaccines);
        delete[] vaccine_array;
    }
    return 0;
}
