#include<iostream>
#include<cstring>

using namespace std;

class MediaSegment
{
protected:
    char naslov[100];
    char avtor[100];
    int vremetraenje;
    int golemina;
public:
    MediaSegment(char *naslov="", char *avtor="", int vremetraenje=0, int golemina=0)
    {
        strcpy(this->naslov,naslov);
        strcpy(this->avtor,avtor);
        this->vremetraenje=vremetraenje;
        this->golemina = golemina;
    }
    virtual double price() const = 0;
};


class AudioRecording : virtual public MediaSegment
{
protected:
    short Atip;
    short count;
public:
    AudioRecording(char *naslov="", char *avtor="", int vremetraenje=0, int golemina=0, short Atip=0, short count=0) : MediaSegment(naslov,avtor,vremetraenje,golemina)
    {
        this->Atip = Atip;
        this->count = count;
    }
    double price() const
    {
        double sum=count*vremetraenje;
        if(Atip==3)
            sum=sum*1.5;
        return sum;
    }
    friend ostream &operator <<(ostream &out, AudioRecording &a)
    {
        out<<a.naslov<<" - "<<a.avtor<<" - "<<a.vremetraenje<<" - "<<a.golemina<< " - "<<a.price()<<endl;
        return out;
    }
};

class VideoRecording : virtual public MediaSegment
{
protected:
    int sirina;
    short tip;
public:
    VideoRecording(char *naslov="", char *avtor="", int vremetraenje=0, int golemina=0, int sirina=0, short tip=0): MediaSegment(naslov,avtor,vremetraenje,golemina)
    {
        this->sirina=sirina;
        this->tip=tip;
    }
    double price() const
    {
        double cena=0;
        if(sirina<=1920)
            cena = vremetraenje*100;
        else
            cena = vremetraenje*170;
        if(tip==0)
            cena = cena *1.5;
        else if(tip==1)
            cena = cena*0.9;
        return cena;
    }
    friend ostream &operator <<(ostream &out, VideoRecording &a)
    {
        out<<a.naslov<<" - "<<a.avtor<<" - "<<a.vremetraenje<<" - "<<a.golemina<<" - "<<a.sirina<< " - "<<a.price()<<endl;
        return out;
    }
};


class MusicVideo : public AudioRecording, public VideoRecording
{
    char *datum;
public:
    MusicVideo(char *naslov="", char *avtor="", int vremetraenje=0, int golemina=0, short Atip=0, short count=0, int sirina=0, short tip=0, char *datum="") :
    MediaSegment(naslov,avtor,vremetraenje,golemina)
    {
        this->count=count;
        this->Atip=Atip;
        this->sirina=sirina;
        this->tip = tip;
        this->datum = new char[strlen(datum)+1];
        strcpy(this->datum,datum);
    }
    double price() const
    {
        double sum=0;
        sum=sum+AudioRecording::price() + VideoRecording::price();
        if(strcmp(datum+4, "2010")>0)
            sum=sum*1.3;
        return sum;
    }
    friend ostream &operator <<(ostream &out, const MusicVideo &m)
    {
        out<<m.naslov<<" - "<<m.avtor<<" - "<<m.datum<< " - "<<m.vremetraenje<<" - "<<m.price()<<endl;
        return out;
    }
};

double total_price(MediaSegment **niza, int count)
{
    double sum=0;
    for(int i=0; i<count; i++)
        sum=sum+niza[i]->price();

    return sum;
}

MusicVideo cheapest_music_video(MediaSegment **niza, int count)
{
    int zapi=-1;
    for(int i=0; i<count; i++)
    {
        MusicVideo *m = dynamic_cast<MusicVideo*>(niza[i]);
        if(m!=0)
        {
            if(zapi==-1)
            {
                zapi=i;
                continue;
            }
            if(niza[i]->price()<niza[zapi]->price())
                zapi=i;
        }
    }
    MusicVideo *vrati = dynamic_cast<MusicVideo*>(niza[zapi]);
    return *vrati;
}

int main() {

  int test_case_num;
  cin>>test_case_num;


  // for MediaSegment
  char title[100];
  char author[1000];
  unsigned int size;
  unsigned int duration;


  // for AudioRecording
  //-------------------
  unsigned short channels;

  // AudioFormat:
  // 0 - mp3
  // 1 - wav
  // 2 - ogg
  // 3 - flac
  unsigned short format;


  // for VideoRecording
  //-------------------
  unsigned short width;

  // VideoCompression:
  // 0 - x264
  // 1 - Theora
  // 2 - AV1
  int compression;


  // for MusicVideo
  //-------------------
  char publication_date[9];


  if (test_case_num == 1){
    cout<<"Testing class AudioRecording and operator<<"<<std::endl;
    cin.get();
    cin.getline(title,100);
    cin.getline(author, 100);
    //cin.get();
    cin >> duration >> size;
    cin >> format >> channels;

    AudioRecording a(title, author, duration, size, format, channels);

    cout<<a;

  }

  else if (test_case_num == 2){
    cout<<"Testing class VideoRecording and operator<<"<<std::endl;
    cin.get();
    cin.getline(title,100);
    cin.getline(author, 100);
    //cin.get();
    cin >> duration >> size;
    cin >> width >> compression;

    VideoRecording v(title, author, duration, size, width, compression);

    cout<<v;

  }

  else if (test_case_num == 3){
    cout<<"Testing class MusicVideo and operator<<"<<std::endl;

    cin.get();
    cin.getline(title,100);
    cin.getline(author, 100);
    //cin.get();
    cin >> duration >> size;

    cin >> format >> channels;
    cin >> width >> compression;

    cin.get();
    cin.getline(publication_date, 9);
    MusicVideo mv(title, author, duration, size, format, channels, width, compression, publication_date);

    cout << mv;
  }

  else if (test_case_num == 4){
    cout<<"Testing function: total_price "<<std::endl;

    MediaSegment ** m;

    int num_media_segments;
    cin >> num_media_segments;

    // 1 - AudioRecording
    // 2 - VideoRecording
    // 3 - MusicVideo
    short media_type;

    m = new MediaSegment*[num_media_segments];

    for (int i=0; i<num_media_segments; i++) {

      cin >> media_type;

      cin.get();
      cin.getline(title,100);
      cin.getline(author, 100);
      //cin.get();
      cin >> duration >> size;

      switch(media_type) {
      case 1:
              cin >> format >> channels;
              m[i] = new AudioRecording(title, author, duration, size, format, channels);
          break;
      case 2:
              cin >> width >> compression;
              m[i] = new VideoRecording(title, author, duration, size, width, compression);
          break;
      case 3:
              cin >> format >> channels;
              cin >> width >> compression;
              cin.get();
              cin.getline(publication_date, 9);
              m[i] = new MusicVideo(title, author, duration, size, format, channels, width, compression, publication_date);
          break;
      }
    }

    //for (int i=0;i<num_media_segments; i++){
    //    cout << *m[i];
    //}

    cout<< "Total price is: " << total_price(m, num_media_segments);

    delete [] m;

  }
  else if (test_case_num == 5){
    cout<<"Testing function: cheapest_music_video "<<std::endl;

    MediaSegment ** m;

    int num_media_segments;
    cin >> num_media_segments;

    // 1 - AudioRecording
    // 2 - VideoRecording
    // 3 - MusicVideo
    short media_type;

    m = new MediaSegment*[num_media_segments];

    for (int i=0; i<num_media_segments; i++) {

      cin >> media_type;

      cin.get();
      cin.getline(title,100);
      cin.getline(author, 100);
      //cin.get();
      cin >> duration >> size;

      switch(media_type) {
      case 1:
              cin >> format >> channels;
              m[i] = new AudioRecording(title, author, duration, size, format, channels);
          break;
      case 2:
              cin >> width >> compression;
              m[i] = new VideoRecording(title, author, duration, size, width, compression);
          break;
      case 3:
              cin >> format >> channels;
              cin >> width >> compression;
              cin.get();
              cin.getline(publication_date, 9);
              m[i] = new MusicVideo(title, author, duration, size, format, channels, width, compression, publication_date);
          break;
      }
    }

   cout << cheapest_music_video(m, num_media_segments);

    delete [] m;
  }

  return 0;
}
