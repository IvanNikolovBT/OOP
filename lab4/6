#include <iostream>
#include <cstring>
using namespace std;

enum Tip {
    LINUX=1, UNIX, WINDOWS
};

class OperativenSistem {
private:
    char * OSName;
    float version;
    Tip whichOS;
    float sizeOS;
public:
    OperativenSistem() {
        version = 0;
        sizeOS = 0;
        whichOS = (Tip)-1;
        OSName = nullptr;
    }
    OperativenSistem(char *osn, float v, Tip wos, float s) {
        OSName = new char[strlen(osn)+1];
        strcpy(OSName, osn);
        version = v;
        whichOS = wos;
        sizeOS = s;
    }
    OperativenSistem(const OperativenSistem &OS) {
        OSName = new char[strlen(OS.OSName)+1];
        strcpy(OSName, OS.OSName);
        version = OS.version;
        whichOS = OS.whichOS;
        sizeOS = OS.sizeOS;
    }
    OperativenSistem& operator=(const OperativenSistem &OS) {
        if(this == &OS) return * this;
        version = OS.version;
        whichOS = OS.whichOS;
        sizeOS = OS.sizeOS;
        if(OSName != nullptr) delete [] OSName;
        OSName = new char[strlen(OS.OSName)+1];
        strcpy(OSName, OS.OSName);
    }
    void pecati() {
        cout<<"Ime: "<<OSName<<" Verzija: "<<version<<" Tip: "<<whichOS<<" Golemina:"<<sizeOS<<"GB"<<endl;
    }
    bool ednakviSe(const OperativenSistem &os) {
        return !strcmp(this->OSName, os.OSName) && this->version == os.version && this->sizeOS == os.sizeOS && this->whichOS == os.whichOS;
    }
    int sporediVerzija(const OperativenSistem &os) {
        if(this->version == os.version) return 0;
        else if(this->version < os.version) return -1;
        else return 1;
    }
    bool istaFamilija(const OperativenSistem &sporedba) {
        return !strcmp(this->OSName, sporedba.OSName) && whichOS == sporedba.whichOS;
    }
    ~OperativenSistem() {
        if(OSName != nullptr) delete [] OSName;
    }
    friend class Repozitorium;
};

class Repozitorium {
private:
    char RName[20];
    OperativenSistem * sistemi;
    int n;
public:
    Repozitorium(const char *ime) {
        strcpy(RName, ime);
        sistemi = nullptr;
        n = 0;
    }
    ~Repozitorium() {
        if(sistemi != nullptr) delete [] sistemi;
    }
    void pecatiOperativniSistemi() {
        cout<<"Repozitorium: "<<RName<<endl;
        for(int i=0; i<n; i++) {
            sistemi[i].pecati();
        }
    }
    void izbrishi(const OperativenSistem &operativenSistem) {
        int deleteOS = n;
        for(int i=0; i<n; i++) {
            if(sistemi[i].ednakviSe(operativenSistem)) deleteOS = i;
        }
        if(deleteOS == n) return;
        if(deleteOS == n-1) n--;
        else {
            for(int i=deleteOS; i<n; i++) {
                if(sistemi[i].istaFamilija(operativenSistem) && sistemi[i].sporediVerzija(operativenSistem)==-1) {
                    sistemi[i] = sistemi[i+1];
                    return;
                }
            }
        }
    }
    void dodadi(const OperativenSistem &nov) {
        for(int i=0; i<n; i++) {
             if(sistemi[i].istaFamilija(nov) && sistemi[i].sporediVerzija(nov)==-1){
                    sistemi[i] = nov;
                    return;
            }
        }
        OperativenSistem *newOS = new OperativenSistem[n+1];
        for(int i=0; i<n; i++) {
            newOS[i] = sistemi[i];
        }
        if(sistemi != nullptr) delete [] sistemi;
        newOS[n] = nov;
        sistemi = newOS;
        n++;
    }
};

int main() {
    char repoName[20];
    cin>>repoName;
    Repozitorium repozitorium=Repozitorium(repoName);
    int brojOperativniSistemi = 0;
    cin>>brojOperativniSistemi;
    char ime[20];
    float verzija;
    int tip;
    float golemina;
    for (int i = 0; i<brojOperativniSistemi; i++){
        cin>>ime;
        cin>>verzija;
        cin>>tip;
        cin>>golemina;
        OperativenSistem os = OperativenSistem(ime, verzija, (Tip)tip, golemina);
        repozitorium.dodadi(os);
    }

    repozitorium.pecatiOperativniSistemi();
     cin>>ime;
    cin>>verzija;
    cin>>tip;
    cin>>golemina;
    OperativenSistem os = OperativenSistem(ime, verzija, (Tip)tip, golemina);
    cout<<"=====Brishenje na operativen sistem====="<<endl;
    repozitorium.izbrishi(os);
    repozitorium.pecatiOperativniSistemi();
    return 0;
}
