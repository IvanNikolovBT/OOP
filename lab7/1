#include <iostream>
#include <cstring>
using namespace std;

class Employee {
protected:
    char ime[50];
    int godini;
    int iskustvo;
public:
    Employee(char * ime = "", int godini = 0, int iskustvo = 0) {
        strcpy(this->ime, ime);
        this->godini = godini;
        this->iskustvo = iskustvo;
    }
    virtual double plata () = 0;
    virtual double bonus () = 0;
    bool operator==(Employee &e) {
        return (godini == e.godini & bonus() == e.bonus());
    }
};

class SalaryEmployee : public Employee {
private:
    int osnovna;
public:
    SalaryEmployee(char * ime = "", int godini = 0, int iskustvo = 0, int osnovna = 0) : Employee(ime, godini, iskustvo) {
        this->osnovna = osnovna;
    }
    double bonus () {
        return (iskustvo*osnovna)/100;
    }
    double plata () {
        return osnovna + bonus();
    }
};

class HourlyEmployee : public Employee {
private:
    int casovi;
    int vplata;
public:
    HourlyEmployee(char * ime = "", int godini = 0, int iskustvo = 0, int casovi = 0, int vplata = 0) : Employee(ime, godini, iskustvo) {
        this->casovi = casovi;
        this->vplata = vplata;
    }
    double bonus()
    {
        if(casovi > 320)
        {
            return (casovi-320) * 0.5 * vplata;
        }
        return 0;
    }
    double plata () {
        return casovi * vplata + bonus();
    }
};

class Freelancer : public Employee {
private:
    int proekti;
    double sumi[15];
public:
    Freelancer(char * ime = "", int godini = 0, int iskustvo = 0, int proekti = 0, double * sumi = 0) : Employee(ime, godini, iskustvo) {
        this->proekti = proekti;
        for(int i=0; i<proekti; i++) {
            this->sumi[i] = sumi[i];
        }
    }
    double bonus() {
        if(proekti > 5) {
            return (proekti-5)*1000;
        }
        return 0;
    }
    double plata () {
        double total = 0;
        for(int i=0; i<proekti; i++) {
            total += sumi[i];
        }
        return total + bonus();
    }
};

class Company {
private:
    char ime[50];
    int brv;
    Employee ** emp;
public:
    Company(char * ime = "")  {
        strcpy(this->ime, ime);
        brv = 0;
        emp = new Employee * [0];
    }
    Company& operator+=(Employee *c) {
        Employee ** tmp = new Employee * [brv+1];
        for(int i=0; i<brv; i++) {
            tmp[i] = emp[i];
        }
        tmp[brv++] = c;
        delete [] emp;
        emp = tmp;
        return * this;
    }
    double vkupnaPlata() {
        double total = 0;
        for(int i=0; i<brv; i++) {
            total += emp[i]->plata();
        }
        return total;
    }
    double filtriranaPlata(Employee * em) {
        double total = 0;
        for(int i=0; i<brv; i++) {
            if(* emp[i] == * em) {
                total += emp[i]->plata();
            }
        }
        return total;
    }
    void pecatiRabotnici() {
        int s = 0, h = 0, f = 0;
        cout<<"Vo kompanijata "<<ime<< " rabotat:"<<endl;
        for(int i=0; i<brv; i++) {
            SalaryEmployee * se = dynamic_cast<SalaryEmployee *>(emp[i]);
            if(se != 0) {
                s++;
                continue;
            }
            HourlyEmployee * he = dynamic_cast<HourlyEmployee *>(emp[i]);
            if(he != 0) {
                h++;
                continue;
            }
            Freelancer * fe = dynamic_cast<Freelancer *>(emp[i]);
            if(fe != 0) {
                f++;
                continue;
            }
        }
        cout<<"Salary employees: "<<s<<endl;
        cout<<"Hourly employees: "<<h<<endl;
        cout<<"Freelancers: "<<f<<endl;
    }
};

int main() {

char name[50];
cin >> name;
Company c(name);

int n;
cin >> n;

char employeeName[50];
int age;
int experience;
int type;

for (int i=0; i <n; ++i) {
  cin >> type;
  cin >> employeeName >> age >> experience;

  if (type == 1) {
    int basicSalary;
    cin >> basicSalary;
    c += new SalaryEmployee(employeeName, age, experience, basicSalary);
  }

  else if (type == 2) {
    int hoursWorked;
    int hourlyPay;
    cin >> hoursWorked >> hourlyPay;
    c += new HourlyEmployee(employeeName, age, experience, hoursWorked, hourlyPay);
  }

  else {
    int numProjects;
    cin >> numProjects;
    double projects[10];
    for (int i=0; i < numProjects; ++i) {
      cin >> projects[i];
    }
    c += new Freelancer(employeeName, age, experience, numProjects, projects);
  }
}

c.pecatiRabotnici();
cout << "Vkupnata plata e: " << c.vkupnaPlata() << endl;
Employee * emp = new HourlyEmployee("Petre_Petrov",31,6,340,80);
cout << "Filtriranata plata e: " << c.filtriranaPlata(emp);

delete emp;
}
