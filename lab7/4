#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

class Vozilo {
protected:
    double masa;
    int sirina, visina;
public:
    Vozilo(double masa = 0, int sirina = 0, int visina = 0) {
        this->masa = masa;
        this->sirina = sirina;
        this->visina = visina;
    }
    virtual int vratiDnevnaCena() = 0;
    double getMasa()
    {
        return masa;
    }
    int getSirina()
    {
        return sirina;
    }
    int getVisina()
    {
        return visina;
    }
};

class Avtomobil : public Vozilo {
private:
    int brojvrati;
public:
    Avtomobil(double masa = 0, int sirina = 0, int visina = 0, int brojvrati = 0) : Vozilo (masa, sirina, visina) {
        this->brojvrati = brojvrati;
    }
    int vratiDnevnaCena() {
        if(brojvrati < 5) {
            return 100;
        }
        return 130;
    }
};

class Avtobus : public Vozilo {
private:
    int brpatnici;
public:
    Avtobus(double masa = 0, int sirina = 0, int visina = 0, int brpatnici = 0) : Vozilo (masa, sirina, visina) {
        this->brpatnici = brpatnici;
    }
    int vratiDnevnaCena() {
        return brpatnici * 5;
    }
};

class Kamion : public Vozilo {
private:
    double maxMasa;
public:
    Kamion(double masa = 0, int sirina = 0, int visina = 0, double maxMasa = 0) : Vozilo (masa, sirina, visina) {
        this->maxMasa = maxMasa;
    }
    int vratiDnevnaCena() {
        return (masa+maxMasa)*0.02;
    }
    double getMaxMasa()
    {
        return maxMasa;
    }
};

class ParkingPlac {
private:
    Vozilo ** vozila;
    int n;
    void copy(const ParkingPlac &p)
    {
        n=p.n;
        vozila=new Vozilo*[n];
        for(int i=0;i<n;i++)
        {
            vozila[i]=p.vozila[i];
        }
    }
public:
    ParkingPlac() {
        n = 0;
        vozila = new Vozilo * [0];
    }
    ~ParkingPlac() {
     delete [] vozila;
    }
    ParkingPlac(const ParkingPlac &p) {
        copy(p);
    }
    ParkingPlac& operator=(const ParkingPlac &p) {
        if(this != &p) {
            delete [] vozila;
            copy(p);
        }
        return * this;
    }
    ParkingPlac& operator+=(Vozilo * v) {
        Vozilo ** tmp = new Vozilo * [n+1];
        for(int i=0; i<n; i++) {
            tmp[i] = vozila[i];
        }
        tmp[n++] = v;
        delete [] vozila;
        vozila = tmp;
        return * this;
    }
    float presmetajVkupnaMasa() {
        double vkupno = 0;
        for(int i=0; i<n; i++) {
            vkupno += vozila[i]->getMasa();
        }
        return vkupno;
    }
    int brojVozilaPoshirokiOd(int l) {
        int counter = 0;
        for(int i=0; i<n; i++) {
            if(vozila[i]->getSirina() > l) {
                counter++;
            }
        }
        return counter;
    }
    void pecati() {
        int autos = 0, bus = 0, truck = 0;
        for(int i=0; i<n; i++) {
            Avtomobil * a = dynamic_cast<Avtomobil *>(vozila[i]);
            if(a != 0) {
                autos++;
            }
            Avtobus * b = dynamic_cast<Avtobus *>(vozila[i]);
            if(b != 0) {
                bus++;
            }
            Kamion * k = dynamic_cast<Kamion *>(vozila[i]);
            if(k != 0) {
                truck++;
            }
        }
        cout<<"Brojot na avtomobili e "<<autos<<", brojot na avtobusi e "<<bus<<" i brojot na kamioni e "<<truck<<"."<<endl;
    }
    int pogolemaNosivostOd(Vozilo& v) {
        int truckcounter = 0;
        for(int i=0; i<n; i++) {
            Kamion * k = dynamic_cast<Kamion *>(vozila[i]);
            if(k != 0) {
                if(k->getMaxMasa() > v.getMasa()) {
                    truckcounter++;
                }
            }
        }
        return truckcounter;
    }
    int vratiDnevnaZarabotka()
    {
        int vkupno=0;
        for(int i=0;i<n;i++)
        {
            vkupno+=vozila[i]->vratiDnevnaCena();
        }
        return vkupno;
    }
};

int main(){
ParkingPlac p;

int n;
cin>>n;
int shirina,visina, broj;
float masa,nosivost;
for (int i=0;i<n;i++){
    int type;
    cin>>type;
    if(type==1){
        cin>>masa>>shirina>>visina>>broj;
        Avtomobil *a=new Avtomobil(masa,shirina,visina,broj);
        p+=a;
    }
    if(type==2){
        cin>>masa>>shirina>>visina>>broj;
        p+=new Avtobus(masa,shirina,visina,broj);
    }
    if(type==3){
        cin>>masa>>shirina>>visina>>nosivost;
        p+=new Kamion(masa,shirina,visina,nosivost);
    }
}

p.pecati();

cout<<"\nZarabotkata e "<<p.vratiDnevnaZarabotka()<<endl;
cout<<"Vkupnata masa e "<<p.presmetajVkupnaMasa()<<endl;
cout<<"Brojot poshiroki od 5 e "<<p.brojVozilaPoshirokiOd(5)<<endl;
Avtomobil a(1200,4,3,5);
cout<<"Brojot na kamioni so nosivost pogolema od avtomobilot e "<<p.pogolemaNosivostOd(a)<<endl;


}
