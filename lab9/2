#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;

class ArithmeticException {
public:
    void message() {
        cout<<"Division by zero is not allowed"<<endl;
    }
};

class NumbersNotDivisibleException {
private:
    int number;
public:
    NumbersNotDivisibleException(int number) {
        this->number = number;
    }
    void message() {
        cout<<"Division by "<<number<<" is not supported "<<endl;
    }
};

class ArrayFullException {
public:
    void message() {
        cout<<"The array is full. Increase the capacity"<<endl;
    }
};

class IndexOutOfBoundsException {
private:
    int index;
public:
    IndexOutOfBoundsException(int index) {
        this->index = index;
    }
    void message() {
        cout<<"Index "<<index<<" is out of bounds"<<endl;
    }
};

class NumberIsNotPositiveException {
private:
    int number;
public:
    NumberIsNotPositiveException(int number) {
        this->number = number;
    }
    void message() {
        cout<<"Number "<<number<<" is not positive integer"<<endl;
    }
};

class PositiveIntegers {
private:
    int * arr;
    int br;
    int maxBr;
public:
    PositiveIntegers(int maxBr = 0) {
        this->maxBr = maxBr;
        br = 0;
        arr = new int[0];
    }
    PositiveIntegers(const PositiveIntegers &p) {
        maxBr = p.maxBr;
        br = p.br;
        arr = new int[br];
        for(int i=0; i<br; i++) {
            arr[i] = p.arr[i];
        }
    }
    PositiveIntegers& operator=(const PositiveIntegers &p) {
        if(this != &p) {
            maxBr = p.maxBr;
            br = p.br;
            delete [] arr;
            arr = new int[br];
            for(int i=0; i<br; i++) {
            arr[i] = p.arr[i];
            }
            return * this;
        }
    }
    ~PositiveIntegers () {
        delete [] arr;
    }
    PositiveIntegers& operator+=(int number) {
        if(br == maxBr) {
            throw(ArrayFullException());
        }
        if(number <= 0) {
            throw(NumberIsNotPositiveException(number));
        }
        int * tmp = new int[br+1];
        for(int i=0; i<br; i++) {
            tmp[i] = arr[i];
        }
        tmp[br++] = number;
        delete [] arr;
        arr = tmp;
        return * this;
    }
    PositiveIntegers operator *(int number) {
        PositiveIntegers pi(*this);
        for(int i=0; i<br; i++) {
            pi.arr[i]*=number;
        }
        return pi;
    }
    PositiveIntegers operator /(int number) {
        if(number == 0) {
            throw ArithmeticException();
        }
        for(int i=0; i<br; i++) {
            if(arr[i] % number != 0) {
                throw NumbersNotDivisibleException(number);
            }
        }
        PositiveIntegers pi (*this);
        for(int i=0; i<br; i++) {
            pi.arr[i]/=number;
        }
        return pi;
    }
    int& operator[](int index) {
        if(index < 0 || index > br) {
            throw IndexOutOfBoundsException(index);
        }
        return arr[index];
    }
    void increaseCapacity(int c) {
        maxBr += c;
    }
    void print() {
        cout<<"Size: "<<br;
        cout<<" Capacity: "<<maxBr;
        cout<<" Numbers: ";
        for(int i=0; i<br; i++) {
            cout<<arr[i]<<" ";
        }
         cout<<endl;
    }
};

int main() {
	
	int n,capacity;
	cin >> n >> capacity;
	PositiveIntegers pi (capacity);
	for (int i=0;i<n;i++){
		int number;
		cin>>number;
        try {
           pi+=number; 
        }
        catch(ArrayFullException &ae) {
            ae.message();
        }
        catch(NumberIsNotPositiveException &ne) {
            ne.message();
        }
		
        
	}
	cout<<"===FIRST ATTEMPT TO ADD NUMBERS==="<<endl;
	pi.print();
	int incCapacity;
	cin>>incCapacity;
	pi.increaseCapacity(incCapacity);
	cout<<"===INCREASING CAPACITY==="<<endl;
	pi.print();
	
	int n1;
	cin>>n1;
	for (int i=0;i<n1;i++){
		int number;
		cin>>number;
		try {
           pi+=number; 
        }
        catch(ArrayFullException &ae) {
            ae.message();
        }
        catch(NumberIsNotPositiveException &ne) {
            ne.message();
        }       
	}
	cout<<"===SECOND ATTEMPT TO ADD NUMBERS==="<<endl;
	
    pi.print();	
	PositiveIntegers pi1;
	
	cout<<"===TESTING DIVISION==="<<endl;	
	
	try {
	pi1 = pi/0;
	pi1.print();
	}
	catch(ArithmeticException &ae) {
        ae.message();
	}
	catch(NumbersNotDivisibleException &ne) {
        ne.message();
	}
	
	try {
	pi1 = pi/1;
	pi1.print();
	}
	catch(ArithmeticException &ae) {
        ae.message();
	}
	catch(NumbersNotDivisibleException &ne) {
        ne.message();
	}	
	
	try {
	pi1 = pi/2;
	pi1.print();
	}
	catch(ArithmeticException &ae) {
        ae.message();
	}
	catch(NumbersNotDivisibleException &ne) {
        ne.message();
	}
	
	cout<<"===TESTING MULTIPLICATION==="<<endl;
	pi1 = pi*3;
	pi1.print();
	
	
	cout<<"===TESTING [] ==="<<endl;
	try {
        cout<<"PositiveIntegers[-1] = "<<pi[-1]<<endl;	
	}
	catch(IndexOutOfBoundsException &ie) {
        ie.message();
	}	
	
	try{
        cout<<"PositiveIntegers[2] = "<<pi[2]<<endl;
	}
	catch(IndexOutOfBoundsException &ie) {
        ie.message();
	}	
	
	try {
        cout<<"PositiveIntegers[3] = "<<pi[3]<<endl;
	}
	catch(IndexOutOfBoundsException &ie) {
        ie.message();
	}	
	
    try {
        cout<<"PositiveIntegers[12] = "<<pi[12]<<endl;
    }
    catch(IndexOutOfBoundsException &ie) {
        ie.message();
	}	

	return 0;
}
